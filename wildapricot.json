{
  "swagger" : "2.0",
  "info" : {
    "description" : "\nThis is Wild Apricot's API for administrators. You can use it if you already have a Wild Apricot account (typically with a website on  *.wildapricot.org). Otherwise, please use https://register.wildapricot.com to create a new account.\n\nIf you have any questions about this API, please contact our support team at support@wildapricot.com.\n",
    "version" : "2.1.0",
    "title" : "Wild Apricot Admin API"
  },
  "host" : "api.wildapricot.org",
  "basePath" : "/v2.1",
  "schemes" : [ "https" ],
  "produces" : [ "application/json", "application/xml" ],
  "security" : [ {
    "OAuth2_autorizationCode" : [ ]
  }, {
    "OAuth2_password" : [ ]
  }, {
    "OAuth2_clientCredentials" : [ ]
  } ],
  "paths" : {
    "/" : {
      "get" : {
        "summary" : "Base URL for specific API version.",
        "description" : "base URL for specific API version. It provides a list of resources that can be directly accessible by URL without providing any additional information like account ID etc.",
        "operationId" : "GetApiResources",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Array of resources",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Resource"
              }
            }
          }
        }
      }
    },
    "/accounts" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "List of available accounts",
        "description" : "List of accounts available with current oAuth token. Typicaly here would be only one record in an array\n",
        "operationId" : "GetAccountsList",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "An array of accounts",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Account"
              }
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Details for specific account",
        "description" : "Details for specific account\n",
        "operationId" : "GetAccount",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Account details",
            "schema" : {
              "$ref" : "#/definitions/Account"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/contacts" : {
      "get" : {
        "tags" : [ "Contacts" ],
        "summary" : "Contacts list",
        "description" : "\nContacts search can be executed in synchronous and asynchronous manner. It depends on $async query string parameters.\n  # Synchronous call\n  When API call is processing synchronously, then response is just an array of contacts.\n  To make a synchronous contacts search, client application should make a request with query string parameter **$async=false**.\n\n  `GET https://api.wildapricot.org/v2/accounts/{account_id}/contacts?$async=false&OTHER_QUERY_PARAMS`\n\n  # Asynchronous call\n  Contacts search is processed asynchronously by default. So if client application specifies $async=true, or does not specify this parameter at all, the request is processed as described below. In this case contacts search is a two-step action.\n  - **Search request**. Client specifies search conditions and receives resultId. See $filter and $select parameters for filtering.\n  - **Retrieve result**. Client passes resultId and receives request processing status and contacts list if request is already processed\n\n![async contact search diagramm](http://localhost:8019/Content/swagger/WAFiles/ContactListAsyncCall.png)\n",
        "operationId" : "GetContactsList",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "$async",
          "in" : "query",
          "description" : "\nControls whether the API call is perform asynchronously. Default value if true.\n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "resultId",
          "in" : "query",
          "description" : "\nThis parameter is used on a second step of asynchronous search. It should equal to the value of ResultId in response to the first step of asynchronous search.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "\nFilters the results of the Contacts API call so that only those records that match the filter criteria are included.\nSee [Filtering the results](http://gethelp.wildapricot.com/en/articles/502#filtering) for details.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "Controls which fields are returned in the Contacts API call.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$sort",
          "in" : "query",
          "description" : "\nOrdering expression. There are 2 sorting options - **Name** and  **MemberSince**. And also 2 direction modifiers - **asc** and **desc**.\n---\nExample of valid expression - MemberSince asc\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "simpleQuery",
          "in" : "query",
          "description" : "\nsimpleQuery is a parameter which allows you to search for contacts by matching a substring in first name, last name, organization, email or phone. This is simpler than using $filter parameter. \n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "\n'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'\n- ...&$top=100 - will return records from 0 to 99 - ...?$skip=100&top=100' - will return records from 100 to 199 - ...?$skip=200' - will return records from 199 to the end\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "this parameter specifies the maximum number of entries to be returned",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$count",
          "in" : "query",
          "description" : "\nSpecifies that the result should contain only a total number of records matching criteria. Requests with specified $count parameter are always processed as synchronous.\n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "idsOnly",
          "in" : "query",
          "description" : "\nWhen idsOnly specified, the API returns only a list of identifiers matching criteria.\n",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "A wrapper object, which contains a list of contacts, contact identifiers, contacts count or information about asynchronous search request.",
            "schema" : {
              "$ref" : "#/definitions/ContactsResponse"
            }
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      },
      "post" : {
        "tags" : [ "Contacts" ],
        "summary" : "Create a new contact or member record",
        "operationId" : "CreateContact",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "in" : "body",
          "name" : "contact",
          "description" : "\n- Values for read-only or unrecognized fields will be ignored.\n- In order to **assign membership**\n  - set MembershipEnabled=true\n  - set MembershipLevel.Id to id of desired level\n\n- In order to **assign bundle** membership\n  - set MembershipEnabled=true\n  - set MembershipLevel.Id to id of some bundle level\n  - set 'Member role' field value to json '{ \"Label\": \"ROLE\" }' where ROLE is \"Bundle administrator\" or \"Bundle member\"\n  - For bundle member set field 'Bundle ID' to value of bundle identifier. The bundle ID is returned by the [Bundles API call](https://gethelp.wildapricot.com/en/articles/504) when using it to retrieve bundle information for a particular membership level.\n",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateContactParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns created contact record.",
            "schema" : {
              "$ref" : "#/definitions/contactExtendedMembershipInfo"
            }
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/contacts/me" : {
      "get" : {
        "tags" : [ "Contacts" ],
        "summary" : "Retrieve information about current contact",
        "operationId" : "GetCurrentContactInfo",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "information about current contact",
            "schema" : {
              "$ref" : "#/definitions/ContactsMe"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/contacts/{contactId}" : {
      "get" : {
        "tags" : [ "Contacts" ],
        "summary" : "Retrieve information about specific member or contact",
        "operationId" : "GetContactDetails",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "contactId",
          "in" : "path",
          "description" : "Unique contact identifier",
          "required" : true,
          "type" : "integer"
        }, {
          "name" : "getExtendedMembershipInfo",
          "in" : "query",
          "description" : "\nWhen GetExtendedMembershipInfo specified the API returns the information about membership order status, membership invoice and allowed actions for current member status.\n",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "information about specific member or contact",
            "schema" : {
              "$ref" : "#/definitions/contactExtendedMembershipInfo"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      },
      "put" : {
        "tags" : [ "Contacts" ],
        "summary" : "Update information about existing member or contact",
        "description" : "In order to update contact details it is recommended to provide only the custom fields you want to modify. See POST .../contacts for more details.\n",
        "operationId" : "UpdateContactDetails",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "contactId",
          "in" : "path",
          "description" : "Unique contact identifier",
          "required" : true,
          "type" : "integer"
        }, {
          "in" : "body",
          "name" : "contact",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UpdateContactParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Updated version of contact information.\n",
            "schema" : {
              "$ref" : "#/definitions/contactExtendedMembershipInfo"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      },
      "delete" : {
        "tags" : [ "Contacts" ],
        "description" : "Delete an archived contact",
        "operationId" : "DeleteContact",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "contactId",
          "in" : "path",
          "description" : "Unique contact identifier",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/rpc/{accountId}/AcceptTermsOfUse" : {
      "post" : {
        "tags" : [ "Contacts" ],
        "summary" : "Accepts Terms of Use.",
        "description" : "Accepts Wild Apricot Terms of Use for currently loged in user. Does nothing if accepted already.\n",
        "operationId" : "AcceptTermsOfUse",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/contactfields" : {
      "get" : {
        "tags" : [ "Contacts.CustomFields" ],
        "summary" : "List of custom fields related to contacts and members.",
        "description" : "\nThis list contains a list of fields of 2 different types.\n - System fields are defined by Wild Apricot system and cannot be removed.\n - Custom fields can be defined by administrator to store some data specific to your account.\n",
        "operationId" : "GetContactFieldDefinitions",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "showSectionDividers",
          "in" : "query",
          "description" : "Default value is false. Specifies whether section dividers also should be included in the response.",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "An array of contact field descriptions",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ContactFieldDescription"
              }
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      },
      "post" : {
        "tags" : [ "Contacts.CustomFields" ],
        "summary" : "Creates a new contact / membership field",
        "operationId" : "CreateContactFieldDefinition",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "in" : "body",
          "name" : "ContactField",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateContactFieldParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "created field identifier",
            "schema" : {
              "type" : "integer"
            }
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/contactfields/{contactFieldId}" : {
      "put" : {
        "tags" : [ "Contacts.CustomFields" ],
        "summary" : "Updates an existing contact / membership field",
        "description" : "Limitations: field type cannot be changed; contact field cannot be transformed to membership field or vice versa",
        "operationId" : "UpdateContactFieldDefinition",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "contactFieldId",
          "in" : "path",
          "description" : "contact field identifier",
          "required" : true,
          "type" : "integer"
        }, {
          "in" : "body",
          "name" : "ContactField",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UpdateContactFieldParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "return true if field was updated successfully",
            "schema" : {
              "type" : "boolean"
            }
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      },
      "delete" : {
        "tags" : [ "Contacts.CustomFields" ],
        "description" : "removes existing field by id",
        "operationId" : "DeleteContactFieldDefinition",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "contactFieldId",
          "in" : "path",
          "description" : "contact field identifier",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "return true if field was removed successfully",
            "schema" : {
              "type" : "boolean"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/savedsearches" : {
      "get" : {
        "tags" : [ "Contacts.SavedSearch" ],
        "summary" : "List of Saved Searches.",
        "operationId" : "GetSavedSearchesList",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "An array of saved search descriptions",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SavedSearchListItem"
              }
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/savedsearches/{savedSearchId}" : {
      "get" : {
        "tags" : [ "Contacts.SavedSearch" ],
        "summary" : "Saved Search and found contacts.",
        "operationId" : "GetSavedSearchDetails",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "savedSearchId",
          "in" : "path",
          "description" : "Saved Search identifier",
          "required" : true,
          "type" : "integer"
        }, {
          "name" : "excludeArchived",
          "in" : "query",
          "description" : "exclude archived contacts from found ContactIDs.",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "\nFilters the results of the Contacts API call so that only those records that match the filter criteria are included.\nSee [Filtering the results](http://gethelp.wildapricot.com/en/articles/502#filtering) for details.\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Saved Search description and found contact IDs",
            "schema" : {
              "$ref" : "#/definitions/SavedSearch"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/pictures/{pictureId}" : {
      "get" : {
        "tags" : [ "Pictures" ],
        "summary" : "Download picture",
        "description" : "Picture available for specific account.",
        "operationId" : "GetPictureContent",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "pictureId",
          "in" : "path",
          "description" : "Picture identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fullSize",
          "in" : "query",
          "description" : "Full size picture will be returned. If full size picture does not exist, thumbnail will be returned.",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "asBase64",
          "in" : "query",
          "description" : "Base64 encoded image will be returned.",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "Response is common HttpResponseMessage with content set to picture binary data.",
            "schema" : {
              "type" : "file"
            }
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/pictures" : {
      "post" : {
        "tags" : [ "Pictures" ],
        "summary" : "Upload pictures",
        "description" : "Picture can be uploaded using multipart/form-data POST request (contains Content-Type header set to 'multipart/form-data'). A multipart/form-data request contains a series of parts, each representing a picture. Each part is expected to contain a \"Content-Disposition\" header whose value is \"form-data\". One of its properties (Name, FileName) must be set and have unique value. In case of similar values, only one of those part will be used, others will be dropped. For example, you have uploaded 2 pictures with same Name set to \"name\". If they have different FileName set, it's ok, but if FileName properties are same as well, only one of those pictures will be saved and available for further processing. Keep this in mind.\nLimitations:\n  - Maximum size for one uploaded picture is 10mb.\n  - Maximum request length is 10mb. It means that you can upload one 10mb picture or 10 pictures 1mb each.\n  - Maximum dimensions for uploaded picture are not set, but each picture will be resized to 110px after uploading.\n  - Supported picture types are: png, jpeg, bmp. Bmp pictures will be converted to png format.\n  - Time period after uploading when picture would be available for use is 30 minutes.\n  - Each uploaded picture can be used only once. After first usage it will be removed permanently.\n  - Mime type must be 'image' and must correlate to picture type. If you upload the 'png' with 'image/bmp' mime type set, this picture will be dropped.\n  - In case of uploading several pictures in one request either 'Name' or 'FileName' property of Content-Disposition header must be set. Otherwise the picture will be dropped.\n",
        "operationId" : "UploadPicture",
        "consumes" : [ "multipart/form-data" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "picture0",
          "in" : "formData",
          "description" : "The uploaded picture0 data",
          "required" : true,
          "type" : "file"
        }, {
          "name" : "picture1",
          "in" : "formData",
          "description" : "The uploaded picture1 data",
          "required" : false,
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "Response is simple json object which contains picture guids (see example)",
            "schema" : {
              "type" : "object",
              "properties" : {
                "picture0" : {
                  "type" : "string",
                  "example" : "cldyhbc3.jpeg",
                  "description" : "Picture guid"
                },
                "picture1" : {
                  "type" : "string",
                  "example" : "kxdtilz4.jpeg",
                  "description" : "Picture guid"
                }
              }
            }
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/membershiplevels" : {
      "get" : {
        "tags" : [ "Membership.Levels" ],
        "summary" : "Get list of all membership levels.",
        "operationId" : "GetMembershipLevelsList",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Collection of membership levels.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/MembershipLevel"
              }
            }
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/membershiplevels/{levelId}" : {
      "get" : {
        "tags" : [ "Membership.Levels" ],
        "summary" : "Retrieve information about specific membership level",
        "operationId" : "GetMembershipLevelDetails",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "levelId",
          "in" : "path",
          "description" : "Unique membership level identifier",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "information about specific membership level",
            "schema" : {
              "$ref" : "#/definitions/MembershipLevel"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/bundles" : {
      "get" : {
        "tags" : [ "Membership.Bundles" ],
        "summary" : "Get list of membership bundles.",
        "operationId" : "GetMembershipBundlesList",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "levelId",
          "in" : "query",
          "description" : "Provide this parameter to get only bundles related to specific membership level.",
          "required" : false,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of bundles matching query parameters.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Bundle"
              }
            }
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/bundles/{bundleId}" : {
      "get" : {
        "tags" : [ "Membership.Bundles" ],
        "summary" : "Get membership bundle details.",
        "operationId" : "GetMembershipBundle",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "bundleId",
          "in" : "path",
          "description" : "Unique bundle identifier",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Bundle description.",
            "schema" : {
              "$ref" : "#/definitions/Bundle"
            }
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/membergroups" : {
      "get" : {
        "tags" : [ "Membership.Groups" ],
        "summary" : "List of Ad Hoc member groups.",
        "operationId" : "GetMembershipGroups",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "An array of member group descriptions",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/MembershipGroupListItem"
              }
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/membergroups/{memberGroupId}" : {
      "get" : {
        "tags" : [ "Membership.Groups" ],
        "summary" : "Ad Hoc member group.",
        "operationId" : "GetMembershipGroupDetails",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "memberGroupId",
          "in" : "path",
          "description" : "member group identifier",
          "required" : true,
          "type" : "integer"
        }, {
          "name" : "includeArchivedMembers",
          "in" : "query",
          "description" : "include archived contacts in ContactIds list. Default - true.",
          "required" : false,
          "type" : "boolean",
          "default" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "member group description",
            "schema" : {
              "$ref" : "#/definitions/MembershipGroup"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/rpc/{accountId}/ApprovePendingMembership" : {
      "post" : {
        "tags" : [ "Membership.Operations" ],
        "summary" : "Approve pending membership.",
        "description" : "\nAvailability of this action depends on contact's state. In order to prevent failures it is recommended to get contact details with parameter getExtendedMembershipInfo=true and use list of allowed actions from Contact.ExtendedMembershipInfo.AllowedActions. If this action is not allowed but client calls it, then API returns HTTP 400, Bad request.\n",
        "operationId" : "ApprovePendingMembership",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "contactId",
          "in" : "query",
          "description" : "Contact ID to approve membership",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/rpc/{accountId}/RejectPendingMembership" : {
      "post" : {
        "tags" : [ "Membership.Operations" ],
        "summary" : "Reject pending membership.",
        "description" : "\nAvailability of this action depends on contact's state. In order to prevent failures it is recommended to get contact details with parameter getExtendedMembershipInfo=true and use list of allowed actions from Contact.ExtendedMembershipInfo.AllowedActions. If this action is not allowed but client calls it, then API returns HTTP 400, Bad request.\n",
        "operationId" : "RejectPendingMembership",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "contactId",
          "in" : "query",
          "description" : "Contact ID to reject membership",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/events" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Events list",
        "description" : "",
        "operationId" : "GetEventsList",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "$async",
          "in" : "query",
          "description" : "\nControls whether the API call is perform asynchronously. Default value if true.\n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "resultId",
          "in" : "query",
          "description" : "\nThis parameter is used on a second step of asynchronous search. It should equal to the value of ResultId in response to the first step of asynchronous search.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "\nFilters the results of the Events API call so that only those records that match the filter criteria are included.\nThe following filter criterias are supported:\n\n  - Id, Supported operations: in.\n  - RegistrationEnabled, Supported operations: eq, ne.\n  - IsUpcoming, Supported operations: eq, ne.\n  - Tags, Supported operations: in.\n  - StartDate, Supported operations: eq, ne, gt, ge, lt, le.\n  - EndDate, Supported operations: eq, ne, gt, ge, lt, le.\n  - Name, Supported operations: eq, ne, substringof.\n  - TextIndex, Supported operations: substringof.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$sort",
          "in" : "query",
          "description" : "\nThis parameter can be used to sort list of IDs or list of events. Possible values are\n\n  - ByStartDate asc - sort events by their Start date. Ascending order.\n  - ByStartDate desc - sort events by their Start date. Descending order.\n  - ByStartSession asc - sort events by start of their sessions (if exists). All past events ignored\n\n  Example: $sort=ByStartDate asc",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "\n'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'\n- ...&$top=100 - will return records from 0 to 99 - ...?$skip=100&top=100' - will return records from 100 to 199 - ...?$skip=200' - will return records from 199 to the end\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "this parameter specifies the maximum number of entries to be returned",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$count",
          "in" : "query",
          "description" : "\nSpecifies that result should contain only a total number of records matching criteria. Requests with specified $count parameter are always processed as synchronous.\n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "idsOnly",
          "in" : "query",
          "description" : "\nWhen idsOnly specified, the API returns only a list of identifiers matching criteria.\n",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "A wrapper object, which contains a list of events, event identifiers or events count.",
            "schema" : {
              "$ref" : "#/definitions/EventsResponse"
            }
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      },
      "post" : {
        "tags" : [ "Events" ],
        "summary" : "Create a new event record",
        "operationId" : "CreateEvent",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "in" : "body",
          "name" : "event",
          "description" : "Event description",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EventEditParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns created event record id",
            "schema" : {
              "type" : "number"
            }
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/events/{eventId}" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Retrieve information about specific event",
        "operationId" : "GetEventDetails",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "eventId",
          "in" : "path",
          "description" : "Unique event identifier",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "information about specific event",
            "schema" : {
              "$ref" : "#/definitions/Event"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      },
      "put" : {
        "tags" : [ "Events" ],
        "summary" : "Update information about existing event",
        "operationId" : "UpdateEvent",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "eventId",
          "in" : "path",
          "description" : "Unique event identifier",
          "required" : true,
          "type" : "integer"
        }, {
          "in" : "body",
          "name" : "event",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EventEditParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Updated version of event information.\n",
            "schema" : {
              "$ref" : "#/definitions/Event"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      },
      "delete" : {
        "tags" : [ "Events" ],
        "description" : "Completely delete event from system.",
        "operationId" : "DeleteEvent",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "eventId",
          "in" : "path",
          "description" : "Unique event identifier",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/rpc/{accountId}/CloneEvent" : {
      "post" : {
        "tags" : [ "Events" ],
        "summary" : "Clone existed event.",
        "operationId" : "CloneEvent",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "in" : "body",
          "name" : "CloneEvent",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CloneEvent"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "created event id",
            "schema" : {
              "type" : "integer"
            }
          },
          "400" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/accounts/{accountId}/EventRegistrationTypes" : {
      "get" : {
        "tags" : [ "Events.EventRegistrationTypes" ],
        "summary" : "Event registration types list",
        "description" : "",
        "operationId" : "getEventRegistrationTypesList",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "eventId",
          "in" : "query",
          "description" : "event identifier",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of event registration types",
            "schema" : {
              "$ref" : "#/definitions/EventRegistrationTypeResponse"
            }
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      },
      "post" : {
        "tags" : [ "Events.EventRegistrationTypes" ],
        "summary" : "Creates a new event registration type.",
        "operationId" : "CreateEventRegistrationType",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "in" : "body",
          "name" : "EventRegistrationType",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EventRegistrationTypeEditParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Created event registration type ID",
            "schema" : {
              "type" : "integer"
            }
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/EventRegistrationTypes/{typeId}" : {
      "get" : {
        "tags" : [ "Events.EventRegistrationTypes" ],
        "summary" : "Event registration type details",
        "operationId" : "GetEventRegistrationTypeDetails",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "typeId",
          "in" : "path",
          "description" : "Unique event registration type identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about specific event registration type",
            "schema" : {
              "$ref" : "#/definitions/EventRegistrationType"
            }
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      },
      "put" : {
        "tags" : [ "Events.EventRegistrationTypes" ],
        "summary" : "Update information about existing event registration type",
        "operationId" : "UpdateEventRegistrationType",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "typeId",
          "in" : "path",
          "description" : "Unique event registration type identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "in" : "body",
          "name" : "event",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EventRegistrationTypeEditParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No information returned on successful update"
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      },
      "delete" : {
        "tags" : [ "Events.EventRegistrationTypes" ],
        "description" : "Completely delete event registration type from the system.",
        "operationId" : "DeleteEventRegistrationType",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "typeId",
          "in" : "path",
          "description" : "Unique event registration type identifier",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/eventregistrations" : {
      "get" : {
        "tags" : [ "Events.EventRegistrations" ],
        "summary" : "Event Registrations list",
        "description" : "⚠ There are 3 parameters, which cannot be used simultaneously. API uses only one parameter of contactId, eventId, $filter or ids exactly in this order. For example if request contains both contactId and eventId, then API uses only contactId to filter event registrations. ⚠ Request parameter is required\n",
        "operationId" : "GetEventRegistrationsList",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "contactId",
          "in" : "query",
          "description" : "contact identifier",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "eventId",
          "in" : "query",
          "description" : "event identifier",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Filters the results of the Events API call so that only those records that match the filter criteria are included. The following filter criterias are supported:\n  - Id, Supported operations: in.\n    example: ?$filter=id in [1,2,3,4….]\n    \n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includeWaitList",
          "in" : "query",
          "description" : "set to true to get all registrations including waitlisted",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "List of event registrations",
            "schema" : {
              "$ref" : "#/definitions/EventRegistrationsResponse"
            }
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      },
      "post" : {
        "tags" : [ "Events.EventRegistrations" ],
        "summary" : "Creates a new event registration.",
        "operationId" : "CreateEventRegistration",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "in" : "body",
          "name" : "EventRegistration",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EventRegistrationPost"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Event registration created",
            "schema" : {
              "$ref" : "#/definitions/EventRegistration"
            }
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/eventregistrations/{event_registration_id}" : {
      "get" : {
        "tags" : [ "Events.EventRegistrations" ],
        "summary" : "Event Registration Details",
        "operationId" : "GetEventRegistrationDetails",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "event_registration_id",
          "in" : "path",
          "description" : "event registration identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of Event Registrations",
            "schema" : {
              "$ref" : "#/definitions/EventRegistration"
            }
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      },
      "put" : {
        "tags" : [ "Events.EventRegistrations" ],
        "summary" : "Update event registration.",
        "operationId" : "UpdateEventRegistration",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "event_registration_id",
          "in" : "path",
          "description" : "event registration identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "in" : "body",
          "name" : "EventRegistration",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EventRegistrationPut"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Event registration created",
            "schema" : {
              "$ref" : "#/definitions/EventRegistration"
            }
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      },
      "delete" : {
        "tags" : [ "Events.EventRegistrations" ],
        "summary" : "Event registration",
        "operationId" : "DeleteEventRegistration",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "event_registration_id",
          "in" : "path",
          "description" : "event registration identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/rpc/{accountId}/CheckInEventAttendee" : {
      "post" : {
        "tags" : [ "Events.EventRegistrations" ],
        "summary" : "Mark event attendee as checked-in (or remove check-in flag).",
        "operationId" : "CheckInEventAttendee",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "in" : "body",
          "name" : "CheckInParams",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CheckInParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/invoices" : {
      "get" : {
        "tags" : [ "Finances.Invoices" ],
        "summary" : "Get list of invoices by criteria.",
        "description" : "\n⚠ There are 3 parameters, which cannot be used simultaneously. API uses only one parameter of contactId, eventId and eventRegistrationId exactly in this order. For example if request contains both contactId and eventId, then API uses only contactId to filter invoices.\n",
        "operationId" : "GetInvoicesList",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "contactId",
          "in" : "query",
          "description" : "Identifier of contact to whom the invoice is assigned.",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "eventId",
          "in" : "query",
          "description" : "Identifier of event. When specified API returns collection of invoices associated with event registrations for the event.",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "eventRegistrationId",
          "in" : "query",
          "description" : "Identifier of event registration. When specified API returns invoice related to the registration. Usually a single invoice.",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "unpaidOnly",
          "in" : "query",
          "description" : "When set to true, API returns only unpaid invoices.",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "idsOnly",
          "in" : "query",
          "description" : "When set to true, API returns only collection of identifiers instead of collection of invoices.",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "StartDate",
          "in" : "query",
          "description" : "Limits result to invoices created since StartDate.",
          "required" : false,
          "type" : "string",
          "format" : "date"
        }, {
          "name" : "EndDate",
          "in" : "query",
          "description" : "Limits result to invoices created before EndDate.",
          "required" : false,
          "type" : "string",
          "format" : "date"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "\n'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'\n- ...&$top=100 - will return records from 0 to 99 - ...?$skip=100&top=100' - will return records from 100 to 199 - ...?$skip=200' - will return records from 199 to the end\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "this parameter specifies the maximum number of entries to be returned",
          "required" : false,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Collection of invoices that match criteria.",
            "schema" : {
              "$ref" : "#/definitions/InvoicesResponse"
            }
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      },
      "post" : {
        "tags" : [ "Finances.Invoices" ],
        "summary" : "Creates a new invoice.",
        "operationId" : "CreateInvoice",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "in" : "body",
          "name" : "Invoice",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateInvoiceParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Created invoice ID",
            "schema" : {
              "type" : "integer"
            }
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/invoices/{invoiceId}" : {
      "get" : {
        "tags" : [ "Finances.Invoices" ],
        "summary" : "Retrieve information about specific invoice",
        "operationId" : "GetInvoiceDetails",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "invoiceId",
          "in" : "path",
          "description" : "Unique invoice identifier",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "information about specific invoice",
            "schema" : {
              "$ref" : "#/definitions/Invoice"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      },
      "put" : {
        "tags" : [ "Finances.Invoices" ],
        "summary" : "Update existing invoice information",
        "operationId" : "UpdateInvoice",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "invoiceId",
          "in" : "path",
          "required" : true,
          "type" : "integer"
        }, {
          "in" : "body",
          "name" : "Invoice",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UpdateInvoiceParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns 200 on successful data update"
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      },
      "delete" : {
        "tags" : [ "Finances.Invoices" ],
        "summary" : "Delete existing invoice",
        "operationId" : "DeleteInvoice",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "invoiceId",
          "in" : "path",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns 200 on successful invoice deletion"
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/rpc/{accountId}/GenerateInvoiceForPendingMembership" : {
      "post" : {
        "tags" : [ "Membership.Operations" ],
        "summary" : "Generate or update invoice for pending membership.",
        "description" : "\nAvailability of this action depends on contact's state. In order to prevent failures it is recommended to get contact details with parameter getExtendedMembershipInfo=true and use list of allowed actions from Contact.ExtendedMembershipInfo.AllowedActions. If this action is not allowed but client calls it, then API returns HTTP 400, Bad request.\n",
        "operationId" : "GenerateInvoiceForPendingMembership",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "contactId",
          "in" : "query",
          "description" : "Contact ID with pending membership",
          "required" : true,
          "type" : "integer"
        }, {
          "name" : "updateIfExists",
          "in" : "query",
          "description" : "update the invoice items if already exists",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/rpc/{accountId}/GenerateInvoiceForEventRegistration" : {
      "post" : {
        "tags" : [ "Finances.Invoices" ],
        "summary" : "Generate or update invoice for existing event registration.",
        "operationId" : "GenerateInvoiceForEventRegistration",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "eventRegistrationId",
          "in" : "query",
          "description" : "Event registration ID with pending membership",
          "required" : true,
          "type" : "integer"
        }, {
          "name" : "updateIfExists",
          "in" : "query",
          "description" : "If set to true and invoice already exists, API will update the invoice items.",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "created or updated invoice",
            "schema" : {
              "$ref" : "#/definitions/Invoice"
            }
          },
          "400" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/rpc/{accountId}/VoidInvoice" : {
      "post" : {
        "tags" : [ "Finances.Invoices" ],
        "summary" : "Void active invoice.",
        "description" : "See https://gethelp.wildapricot.com/en/articles/76#voiding for details on invoice voiding",
        "operationId" : "VoidInvoice",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "invoiceId",
          "in" : "query",
          "description" : "invoiceId ID to void",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/accounts/{accountId}/payments" : {
      "get" : {
        "tags" : [ "Finances.Payments" ],
        "summary" : "Get list of payments by criteria.",
        "operationId" : "GetPaymentsList",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "contactId",
          "in" : "query",
          "description" : "Identifier of contact who made the payment.",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "eventId",
          "in" : "query",
          "description" : "Identifier of event. When specified API returns collection of payments settled to invoices associated with event registrations for the event.",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "idsOnly",
          "in" : "query",
          "description" : "When set to true, API returns only collection of identifiers instead of collection of payments.",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "StartDate",
          "in" : "query",
          "description" : "Limits result to payments created since StartDate.",
          "required" : false,
          "type" : "string",
          "format" : "date"
        }, {
          "name" : "EndDate",
          "in" : "query",
          "description" : "Limits result to payments created before EndDate.",
          "required" : false,
          "type" : "string",
          "format" : "date"
        }, {
          "name" : "ids",
          "in" : "query",
          "description" : "You can filter the payments by specifying a set of payment IDs.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "\n'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'\n- ...&$top=100 - will return records from 0 to 99 - ...?$skip=100&top=100' - will return records from 100 to 199 - ...?$skip=200' - will return records from 199 to the end\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "this parameter specifies the maximum number of entries to be returned",
          "required" : false,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Collection of payments that match criteria.",
            "schema" : {
              "$ref" : "#/definitions/PaymentsResponse"
            }
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      },
      "post" : {
        "tags" : [ "Finances.Payments" ],
        "summary" : "Creates a new payment.",
        "operationId" : "CreatePayment",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "in" : "body",
          "name" : "Payment",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreatePaymentModel"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Payment created",
            "schema" : {
              "$ref" : "#/definitions/Payment"
            }
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/payments/{paymentId}" : {
      "get" : {
        "tags" : [ "Finances.Payments" ],
        "summary" : "Retrieve information about specific payment",
        "operationId" : "GetPaymentDetails",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "paymentId",
          "in" : "path",
          "description" : "Unique payment identifier",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "information about specific payment",
            "schema" : {
              "$ref" : "#/definitions/Payment"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      },
      "put" : {
        "tags" : [ "Finances.Payments" ],
        "summary" : "Update existing payment information",
        "operationId" : "UpdatePayment",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "paymentId",
          "in" : "path",
          "required" : true,
          "type" : "integer"
        }, {
          "in" : "body",
          "name" : "Payment",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UpdatePaymentParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns 200 on successful data update"
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      },
      "delete" : {
        "tags" : [ "Finances.Payments" ],
        "summary" : "Delete existing payment",
        "operationId" : "DeletePayment",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "paymentId",
          "in" : "path",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns 200 on successful payment deletion"
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/payments/{paymentId}/AllocateInvoice" : {
      "post" : {
        "tags" : [ "Finances.Payments" ],
        "summary" : "Allocate invoice to specific payment",
        "description" : "After this operation invoice will be marked as paid.",
        "operationId" : "AllocateInvoice",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "paymentId",
          "in" : "path",
          "description" : "Unique payment identifier",
          "required" : true,
          "type" : "integer"
        }, {
          "in" : "body",
          "name" : "AllocateInvoiceParams",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AllocateInvoiceParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/payments/{paymentId}/AllocateRefundToPayment" : {
      "post" : {
        "tags" : [ "Finances.Payments" ],
        "summary" : "Allocate refund to specific payment",
        "operationId" : "AllocateRefundToPayment",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "paymentId",
          "in" : "path",
          "description" : "Unique payment identifier",
          "required" : true,
          "type" : "integer"
        }, {
          "in" : "body",
          "name" : "RefundParam",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RefundParam"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/payments/{donationId}/AllocateRefundToDonation" : {
      "post" : {
        "tags" : [ "Finances.Payments" ],
        "summary" : "Allocate refund to specific donation",
        "operationId" : "AllocateRefundToDonation",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "donationId",
          "in" : "path",
          "description" : "Unique donation identifier",
          "required" : true,
          "type" : "integer"
        }, {
          "in" : "body",
          "name" : "RefundParam",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RefundParam"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/payments/{paymentId}/UnallocateFromPayment" : {
      "post" : {
        "tags" : [ "Finances.Payments" ],
        "summary" : "Unallocate finance document from specific payment",
        "operationId" : "UnallocateFinanceDocumentFromPayment",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "paymentId",
          "in" : "path",
          "description" : "Unique payment identifier",
          "required" : true,
          "type" : "integer"
        }, {
          "in" : "body",
          "name" : "DocumentParam",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DocumentParam"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/payments/{donationId}/UnallocateFromDonation" : {
      "post" : {
        "tags" : [ "Finances.Payments" ],
        "summary" : "Unallocate finance document from specific donation",
        "operationId" : "UnallocateFinanceDocumentFromDonation",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "donationId",
          "in" : "path",
          "description" : "Unique donation identifier",
          "required" : true,
          "type" : "integer"
        }, {
          "in" : "body",
          "name" : "DocumentParam",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DocumentParam"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/paymentAllocations" : {
      "get" : {
        "tags" : [ "Finances.PaymentAllocations" ],
        "summary" : "Get list describing how payments are allocated among invoices.",
        "description" : "At least one parameter InvoiceId or PaymentId should be specified.",
        "operationId" : "GetPaymentAllocationsList",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "InvoiceId",
          "in" : "query",
          "description" : "Identifier of invoice.",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "PaymentId",
          "in" : "query",
          "description" : "Identifier of payment or refund.",
          "required" : false,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Collection of allocations.",
            "schema" : {
              "$ref" : "#/definitions/PaymentAllocation"
            }
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/refunds" : {
      "get" : {
        "tags" : [ "Finances.Refunds" ],
        "summary" : "Get list of refunds by criteria.",
        "operationId" : "GetRefundsList",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "contactId",
          "in" : "query",
          "description" : "Identifier of contact to whom the refund was made.",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "eventId",
          "in" : "query",
          "description" : "Identifier of event. When specified API returns collection of refunds settled to invoices associated with event registrations for the event.",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "idsOnly",
          "in" : "query",
          "description" : "When set to true, API returns only collection of identifiers instead of collection of refunds.",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "StartDate",
          "in" : "query",
          "description" : "Limits result to refunds created since StartDate.",
          "required" : false,
          "type" : "string",
          "format" : "date"
        }, {
          "name" : "EndDate",
          "in" : "query",
          "description" : "Limits result to refunds created before EndDate.",
          "required" : false,
          "type" : "string",
          "format" : "date"
        }, {
          "name" : "ids",
          "in" : "query",
          "description" : "You can filter the refunds by specifying a set of refund IDs.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "\n'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'\n- ...&$top=100 - will return records from 0 to 99 - ...?$skip=100&top=100' - will return records from 100 to 199 - ...?$skip=200' - will return records from 199 to the end\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "this parameter specifies the maximum number of entries to be returned",
          "required" : false,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Collection of refunds that match criteria.",
            "schema" : {
              "$ref" : "#/definitions/RefundsResponse"
            }
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      },
      "post" : {
        "tags" : [ "Finances.Refunds" ],
        "summary" : "Creates a new refund.",
        "operationId" : "CreateRefund",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "in" : "body",
          "name" : "Refund",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateRefundParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Refund created",
            "schema" : {
              "$ref" : "#/definitions/Refund"
            }
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/refunds/{refundId}" : {
      "get" : {
        "tags" : [ "Finances.Refunds" ],
        "summary" : "Retrieve information about specific refund",
        "operationId" : "GetRefundDetails",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "refundId",
          "in" : "path",
          "description" : "Unique refund identifier",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "information about specific refund",
            "schema" : {
              "$ref" : "#/definitions/Refund"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      },
      "put" : {
        "tags" : [ "Finances.Refunds" ],
        "summary" : "Update existing refund information",
        "operationId" : "UpdateRefund",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "refundId",
          "in" : "path",
          "required" : true,
          "type" : "integer"
        }, {
          "in" : "body",
          "name" : "Refund",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UpdateRefundParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns 200 on successful data update"
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      },
      "delete" : {
        "tags" : [ "Finances.Refunds" ],
        "summary" : "Delete existing refund",
        "operationId" : "DeleteRefund",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "refundId",
          "in" : "path",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns 200 on successful refund deletion"
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/tenders" : {
      "get" : {
        "tags" : [ "Finances.Tenders" ],
        "summary" : "Get list of tenders.",
        "operationId" : "GetTendersList",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Collection of tenders.",
            "schema" : {
              "$ref" : "#/definitions/TendersResponse"
            }
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      },
      "post" : {
        "tags" : [ "Finances.Tenders" ],
        "summary" : "Creates a new tender.",
        "operationId" : "CreateTender",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "in" : "body",
          "name" : "Tender",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Tender"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Tenderscreated",
            "schema" : {
              "$ref" : "#/definitions/Tender"
            }
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/tenders/{tenderId}" : {
      "get" : {
        "tags" : [ "Finances.Tenders" ],
        "summary" : "Retrieve information about specific tender",
        "operationId" : "GetTenderDetails",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "tenderId",
          "in" : "path",
          "description" : "Unique tender identifier",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "information about specific tender",
            "schema" : {
              "$ref" : "#/definitions/Tender"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      },
      "put" : {
        "tags" : [ "Finances.Tenders" ],
        "summary" : "Update existing tender information",
        "operationId" : "UpdateTender",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "tenderId",
          "in" : "path",
          "required" : true,
          "type" : "integer"
        }, {
          "in" : "body",
          "name" : "Tender",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Tender"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns 200 on successful data update"
          },
          "400" : {
            "description" : "On invalid parameters. See error details in response body.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      },
      "delete" : {
        "tags" : [ "Finances.Tenders" ],
        "summary" : "Delete existing tender",
        "operationId" : "DeleteTender",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "tenderId",
          "in" : "path",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns 200 on successful tender deletion"
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/auditLogItems" : {
      "get" : {
        "tags" : [ "Finances.AuditLog" ],
        "summary" : "List of Audit log items.",
        "description" : "List filter has limitations.\n - if filterObjectType is set then FilterObjectId must be set too.\n - empty filter not allowed (none of filterObjectType, FilterObjectId, StartDate and EndDate are set).\n",
        "operationId" : "GetAuditLogItems",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "filterObjectType",
          "in" : "query",
          "description" : "Kind of object for audit log filter",
          "required" : false,
          "type" : "string",
          "enum" : [ "Undefined", "Contact", "Event", "EventRegistration", "Invoice", "Payment", "Refund", "Donation" ]
        }, {
          "name" : "FilterObjectId",
          "in" : "query",
          "description" : "Unique identifyer of type filterObjectType",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "StartDate",
          "in" : "query",
          "description" : "Limits result to log items created since StartDate.",
          "required" : false,
          "type" : "string",
          "format" : "date"
        }, {
          "name" : "EndDate",
          "in" : "query",
          "description" : "Limits result to log items created before EndDate.",
          "required" : false,
          "type" : "string",
          "format" : "date"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "\n'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'\n- ...&$top=100 - will return records from 0 to 99 - ...?$skip=100&top=100' - will return records from 100 to 199 - ...?$skip=200' - will return records from 199 to the end\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "this parameter specifies the maximum number of entries to be returned",
          "required" : false,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "An array of audit log item descriptions",
            "schema" : {
              "$ref" : "#/definitions/AuditItemsListResult"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/auditLogItems/{itemId}" : {
      "get" : {
        "tags" : [ "Finances.AuditLog" ],
        "summary" : "Single audit log item.",
        "operationId" : "GetAuditLogItem",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "itemId",
          "in" : "path",
          "description" : "Audit log item identifier",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Audit log item description",
            "schema" : {
              "$ref" : "#/definitions/AuditLogItem"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/SentEmails" : {
      "get" : {
        "tags" : [ "Emailing.SentEmails" ],
        "description" : "Sent emails",
        "operationId" : "GetSentEmailsLog",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "\n'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'\n- ...&$top=100 - will return records from 0 to 99 - ...?$skip=100&top=100' - will return records from 100 to 199 - ...?$skip=200' - will return records from 199 to the end\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "this parameter specifies the maximum number of entries to be returned",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "idsOnly",
          "in" : "query",
          "description" : "To get only a list of email identifiers as a result of search request.\n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Allowed filter fields (**allowed operations**):\n  - *SentDate* (**ge**, **le**),\n  - *SenderId* (**eq**),\n  - *OriginType* (**eq**),\n  - *InitializationSourceType* (**eq**)",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Contains a list of sent emails or list of identifiers, depending on idsOnly parameter value.",
            "schema" : {
              "$ref" : "#/definitions/EmailLog"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/SentEmails/{emailId}" : {
      "get" : {
        "tags" : [ "Emailing.SentEmails" ],
        "description" : "Sent email details",
        "operationId" : "GetSentEmailDetails",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "emailId",
          "in" : "path",
          "description" : "Email unique Id",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Email details",
            "schema" : {
              "$ref" : "#/definitions/EmailLogRecord"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/EmailDrafts" : {
      "get" : {
        "tags" : [ "Emailing.Drafts" ],
        "description" : "Email drafts",
        "operationId" : "GetEmailDraftsList",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "\n'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'\n- ...&$top=100 - will return records from 0 to 99 - ...?$skip=100&top=100' - will return records from 100 to 199 - ...?$skip=200' - will return records from 199 to the end\n",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "this parameter specifies the maximum number of entries to be returned",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "idsOnly",
          "in" : "query",
          "description" : "Should be set to true in order to get only a list of email identifiers as a result of search request.\n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Allowed filter fields (**allowed operations**):\n  - *LastChangedDate* (**ge**, **le**),\n  - *CreatorId* (**eq**),\n  - *IsScheduled* (**eq**),\n  - *EventId* (**eq**)",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A wrapper object, which contains a list of sent emails. also contains EmailDraftIdentifiersResult if idsOnly parameter is true",
            "schema" : {
              "$ref" : "#/definitions/EmailDraftListResult"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "428" : {
            "description" : "Current user should accept terms of use before using API. It can be done in web interface, or by making a POST request to /rpc/{accountId}/acceptTermsOfUse"
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/accounts/{accountId}/EmailDrafts/{draftId}" : {
      "get" : {
        "tags" : [ "Emailing.Drafts" ],
        "description" : "Email draft details",
        "operationId" : "GetEmailDraft",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "draftId",
          "in" : "path",
          "description" : "Email draft Id",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Email draft",
            "schema" : {
              "$ref" : "#/definitions/EmailDraft"
            }
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      },
      "delete" : {
        "tags" : [ "Emailing.Drafts" ],
        "description" : "Delete email draft",
        "operationId" : "DeleteEmailDraft",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "draftId",
          "in" : "path",
          "description" : "Email draft Id",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "401" : {
            "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
          },
          "404" : {
            "description" : "Requested item not found."
          },
          "429" : {
            "description" : "Too many requests from same account. Wait for a minute and try again."
          }
        }
      }
    },
    "/rpc/{accountId}/email/SetEmailDraftSchedule" : {
      "post" : {
        "tags" : [ "Emailing.Operations" ],
        "summary" : "Pause or resume scheduled draft.",
        "operationId" : "SetEmailDraftSchedule",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "in" : "body",
          "name" : "EmailScheduleParams",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EmailScheduleParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/rpc/{accountId}/email/GetEmailDraftPreview" : {
      "post" : {
        "tags" : [ "Emailing.Operations" ],
        "summary" : "Get preview version of email.",
        "operationId" : "GetEmailDraftPreview",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "in" : "body",
          "name" : "SendDraft",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SendDraftParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "email preview subject and body",
            "schema" : {
              "$ref" : "#/definitions/EmailDraftPreview"
            }
          },
          "400" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/rpc/{accountId}/email/SendEmailDraft" : {
      "post" : {
        "tags" : [ "Emailing.Operations" ],
        "summary" : "Send draft.",
        "operationId" : "SendEmailDraft",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "in" : "body",
          "name" : "SendDraft",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SendDraftParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "created sent email id",
            "schema" : {
              "type" : "integer"
            }
          },
          "400" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/rpc/{accountId}/email/SendEmail" : {
      "post" : {
        "tags" : [ "Emailing.Operations" ],
        "summary" : "Send draft.",
        "operationId" : "SendEmail",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "in" : "body",
          "name" : "sendEmailParams",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SendEmailParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "created sent email id",
            "schema" : {
              "type" : "integer"
            }
          },
          "400" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/rpc/{accountId}/email/CountUniqueAddressesForEmailRecipients" : {
      "post" : {
        "tags" : [ "Emailing.Operations" ],
        "summary" : "Get count of real email recipients (unique addresses).",
        "operationId" : "GetUniqueEmailRecipientsCount",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "in" : "body",
          "name" : "EmailRecipientsParams",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EmailRecipientsParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "integer"
            }
          },
          "400" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/rpc/{accountId}/email/CountUniqueAddressesForEmailDraft" : {
      "post" : {
        "tags" : [ "Emailing.Operations" ],
        "summary" : "Get count of real email recipients (unique addresses).",
        "operationId" : "GetUniqueEmailRecipientsCountForDraft",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "in" : "body",
          "name" : "emailDraftId",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/emailDraftId"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "integer"
            }
          },
          "400" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/rpc/{accountId}/email/GetUniqueAddressesForEmailRecipients" : {
      "post" : {
        "tags" : [ "Emailing.Operations" ],
        "summary" : "Get unique addresses of real email recipients.",
        "operationId" : "GetUniqueAddressesForEmailRecipients",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "in" : "body",
          "name" : "EmailRecipientsParams",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EmailRecipientsParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/EmailRecipients"
            }
          },
          "400" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/rpc/{accountId}/email/GetUniqueAddressesForEmailDraft" : {
      "post" : {
        "tags" : [ "Emailing.Operations" ],
        "summary" : "Get unique addresses of real email recipients.",
        "operationId" : "GetUniqueAddressesForEmailDraft",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "in" : "body",
          "name" : "emailDraftId",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/emailDraftId"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/EmailRecipients"
            }
          },
          "400" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/accounts/{accountId}/features/{featureId}" : {
      "get" : {
        "tags" : [ "Internal.Features" ],
        "summary" : "Get information about feature availability for specific account.",
        "description" : "\nThere is no way to get full list of features, so api client should know feature identifier. For any invalid featureId API will return {\"Allowed\":true}.\nThis method is reserved **_for internal use only_** and not expected to be used by third party client applications.\n",
        "operationId" : "GetFeatureAvailability",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Your account identifier",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "name" : "featureId",
          "in" : "path",
          "description" : "feature identifier",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Feature availability status.",
            "schema" : {
              "$ref" : "#/definitions/Feature"
            }
          }
        }
      }
    }
  },
  "securityDefinitions" : {
    "OAuth2_password" : {
      "description" : "Use this authentication flow to get oauth token by providing user credentials.\nclientId and clientSecret should be taken from Authorized applications page in admin backend.\n\nFor example if your email is admin@yourdomain.com and password is 123456.\nyou should pass\n`username=admin@yourdomain.com&password=12345&&scope=auto`\n",
      "type" : "oauth2",
      "tokenUrl" : "https://oauth.wildapricot.org/auth/token",
      "flow" : "password",
      "scopes" : {
        "auto" : "autodetect allowed scopes based on current user permissions"
      }
    },
    "OAuth2_clientCredentials" : {
      "description" : "Use this authentication flow to get token by providing API key.\nFor example is your ApiKey is o9q834ywiefyywo34yt you should pass values:\nclientId=APIKEY&clientSecret=o9q834ywiefyywo34yt\n",
      "type" : "oauth2",
      "tokenUrl" : "https://oauth.wildapricot.org/auth/token",
      "flow" : "application",
      "scopes" : {
        "auto" : "autodetect allowed scopes based on current user permissions"
      }
    },
    "OAuth2_autorizationCode" : {
      "description" : "\nUse this flow to get token by authorization through your organization website login form.\n\n<span style=\"color:red\">_This authorization mode can not be used from SwaggerHub interface._</span>\n\n - Replace YOUR_ORGANIZATION with valid domain name.\n - Allow SSO for your authorized application.\n - Add your web application redirect url to list of trusted domains for that application.\n\n See also `http://gethelp.wildapricot.com/en/articles/200`\n",
      "type" : "oauth2",
      "authorizationUrl" : "https://YOUR_ORGANIZATION.wildapricot.org/sys/login/OAuthLogin",
      "tokenUrl" : "https://oauth.wildapricot.org/auth/token",
      "flow" : "accessCode",
      "scopes" : {
        "auto" : "autodetect allowed scopes based on current user permissions"
      }
    }
  },
  "definitions" : {
    "Account" : {
      "type" : "object",
      "required" : [ "ContactLimitInfo", "Currency", "Id", "Localization", "Name", "PrimaryDomainName", "SquareRegisterSettings" ],
      "properties" : {
        "Id" : {
          "type" : "integer",
          "description" : "Account unique identifier."
        },
        "Name" : {
          "type" : "string",
          "description" : "The account name. This corresponds to the organization name as it appears on the Organization details screen."
        },
        "Url" : {
          "$ref" : "#/definitions/ResourceUrl"
        },
        "PrimaryDomainName" : {
          "type" : "string",
          "description" : "The primary domain name for the account."
        },
        "IsFreeAccount" : {
          "type" : "boolean"
        },
        "Resources" : {
          "type" : "array",
          "description" : "Collection of account-related resources.",
          "items" : {
            "$ref" : "#/definitions/Resource"
          }
        },
        "ContactLimitInfo" : {
          "$ref" : "#/definitions/ContactLimitInfo"
        },
        "TimeZone" : {
          "$ref" : "#/definitions/TimeZone"
        },
        "Currency" : {
          "$ref" : "#/definitions/Currency"
        },
        "Localization" : {
          "$ref" : "#/definitions/Localization"
        },
        "SquareRegisterSettings" : {
          "$ref" : "#/definitions/SquareRegisterSettings"
        },
        "BillingPlan" : {
          "$ref" : "#/definitions/BillingPlan"
        }
      },
      "description" : "Information about Wild Apricot account"
    },
    "BillingPlan" : {
      "type" : "object",
      "properties" : {
        "Name" : {
          "type" : "string",
          "description" : "Billing plan name"
        },
        "Price" : {
          "type" : "number",
          "description" : "Monthly price"
        }
      },
      "description" : "Current account billing plan."
    },
    "ContactLimitInfo" : {
      "type" : "object",
      "properties" : {
        "CurrentContactsCount" : {
          "type" : "integer",
          "description" : "Number of contacts currently in database (archived excluded)"
        },
        "BillingPlanContactsLimit" : {
          "type" : "integer",
          "description" : "Maximum number of contacts allowed by billing plan."
        }
      },
      "description" : "Details about limits on the number of contacts."
    },
    "Currency" : {
      "type" : "object",
      "properties" : {
        "Code" : {
          "type" : "string",
          "description" : "Currency code according to ISO4217"
        },
        "Name" : {
          "type" : "string",
          "description" : "Human-readable currency name"
        },
        "Symbol" : {
          "type" : "string",
          "description" : "Currency symbol like $ or €"
        }
      }
    },
    "Feature" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "string",
          "description" : "Feature identifier"
        },
        "Allowed" : {
          "type" : "boolean",
          "description" : "Indicates whether the feature is allowed"
        }
      },
      "title" : "Feature",
      "description" : "Information about specific feature availability"
    },
    "Localization" : {
      "type" : "object",
      "properties" : {
        "DateFormat" : {
          "type" : "string",
          "description" : "Date format like \"d MMM yyyy\""
        },
        "TimeFormat" : {
          "type" : "string",
          "description" : "Time format like \"h:mm tt\""
        }
      }
    },
    "SquareRegisterSettings" : {
      "type" : "object",
      "required" : [ "IntegrationEnabled" ],
      "properties" : {
        "IntegrationEnabled" : {
          "type" : "boolean",
          "description" : "Is integration enabled in admin UI."
        },
        "ClientId" : {
          "type" : "string",
          "description" : "(optional) Square client Id"
        }
      },
      "description" : "Settings for Square Register integration, used for mobile app"
    },
    "TimeZone" : {
      "type" : "object",
      "properties" : {
        "ZoneId" : {
          "type" : "string",
          "description" : "Time zone id, i.e. \"Arabic Standard Time\""
        },
        "Name" : {
          "type" : "string",
          "description" : "Time zone name, i.e. \"(UTC+03:00) Baghdad\""
        },
        "UtcOffset" : {
          "type" : "integer",
          "description" : "Offcet from UTC Time in minutes, i.e. \"180\""
        }
      },
      "description" : "Details about account time zone"
    },
    "EntityFieldDescription" : {
      "type" : "object",
      "required" : [ "AdminOnly", "Description", "FieldName", "IsSystem", "SystemCode", "Type" ],
      "properties" : {
        "FieldName" : {
          "type" : "string",
          "description" : "Field name title, could be displayed in user interface. Field name could be changed by account administrator."
        },
        "SystemCode" : {
          "type" : "string",
          "description" : "System-defined code associated with field. It does not change even if FieldName is edited in admin backend."
        },
        "Type" : {
          "$ref" : "#/definitions/CustomFieldType"
        },
        "DisplayType" : {
          "type" : "string",
          "description" : "Optional hint, which tells how to display and edit field. It appears for String and Choice fields."
        },
        "IsSystem" : {
          "type" : "boolean",
          "description" : "Field is system-defined and could not be deleted. However, field name could be changed by account administrator."
        },
        "AdminOnly" : {
          "type" : "boolean",
          "description" : "Indicates that the field is accessible only by administrators."
        },
        "Description" : {
          "type" : "string",
          "description" : "System-defined description of the field. Empty for custom fields."
        },
        "FieldInstructions" : {
          "type" : "string",
          "description" : "Admin-defined comment for the field. Shown as a tip when members or visitors fill in forms."
        },
        "AllowedValues" : {
          "type" : "array",
          "description" : "If field value is limited to set of predefined values, this contains list of allowed values. Normally, AllowedValues appear for MultipleChoice and Choice fields.",
          "items" : {
            "$ref" : "#/definitions/OptionsListItem"
          }
        },
        "Order" : {
          "type" : "integer",
          "description" : "Sorting order to display the field in UI"
        },
        "ExtraCharge" : {
          "$ref" : "#/definitions/ExtraCharge"
        }
      }
    },
    "Error" : {
      "type" : "object",
      "required" : [ "code", "message" ],
      "properties" : {
        "code" : {
          "type" : "string",
          "description" : "Error code, like Validation / Search / ..."
        },
        "message" : {
          "type" : "string",
          "description" : "An explanation of why this error occured"
        },
        "details" : {
          "type" : "object",
          "description" : "More information about the error. Data structure is specific for each kind of error.",
          "properties" : { }
        }
      }
    },
    "FieldValue" : {
      "type" : "object",
      "properties" : {
        "FieldName" : {
          "type" : "string",
          "description" : "Field title. Custom field names are defined by account adinistrator. System field names are predefined by Wild Apricot system."
        },
        "SystemCode" : {
          "type" : "string",
          "description" : "The system code is a unique field identifier that can be used instead of the field name to identify the field. While field name could be changed by administrators, system codes are defined by the system and cannot be changed."
        },
        "Value" : {
          "type" : "object",
          "description" : "Field value could be an integer / string / date in ISO8601 format / boolean / an object consisting of Id and Label or array of such objects. The content format depends on custom field description.",
          "properties" : { }
        }
      }
    },
    "LinkedResource" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "integer",
          "description" : "unique item identifier"
        },
        "Url" : {
          "type" : "string",
          "description" : "API url to get item details"
        }
      }
    },
    "LinkedResourceWithName" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LinkedResource"
      }, {
        "type" : "object",
        "properties" : {
          "Name" : {
            "type" : "string",
            "description" : "Resource name"
          }
        }
      } ]
    },
    "Resource" : {
      "type" : "object",
      "required" : [ "AllowedOperations", "Name", "Url" ],
      "properties" : {
        "Url" : {
          "$ref" : "#/definitions/ResourceUrl"
        },
        "Name" : {
          "type" : "string",
          "description" : "Name of resource"
        },
        "Description" : {
          "type" : "string",
          "description" : "Text description of the resource"
        },
        "AllowedOperations" : {
          "type" : "array",
          "description" : "Collection of allowed operations for this resource. Possible values are\nGET - Resource can be requested\nPOST - Resource can be created\nPUT - Resource can be updated\nDELETE - Resource can be deleted\n",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ResourceUrl" : {
      "type" : "string",
      "description" : "Permanent resource URL in API."
    },
    "ContactsMe" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "integer",
          "description" : "Contact unique identifier."
        },
        "Url" : {
          "$ref" : "#/definitions/ResourceUrl"
        },
        "DisplayName" : {
          "type" : "string",
          "description" : "Combination of names or organization or email. Value depends on presence of values. It could be used to display contact record on lists."
        },
        "FirstName" : {
          "type" : "string",
          "description" : "Shortcut for custom field value with system code 'FirstName'"
        },
        "LastName" : {
          "type" : "string",
          "description" : "Shortcut for custom field value with system code 'LastName'"
        },
        "Email" : {
          "type" : "string",
          "description" : "Contact primary email, shortcut for custom field value with system code 'Email'. Should be unique in account."
        },
        "Organization" : {
          "type" : "string",
          "description" : "Shortcut for custom field value with system code 'Organization'"
        },
        "Status" : {
          "type" : "string",
          "description" : "The status of the contact's membership. The status is only included in the results if the contact is a member.",
          "enum" : [ "Active", "Lapsed", "PendingNew", "PendingRenewal", "PendingUpgrade" ]
        },
        "MembershipLevel" : {
          "type" : "object",
          "allOf" : [ {
            "$ref" : "#/definitions/LinkedResourceWithName"
          }, {
            "description" : "Information about current membership level assigned to the contact. If the contact is not a member, then the MembershipLevel field is not included in the results."
          } ]
        },
        "IsAccountAdministrator" : {
          "type" : "boolean",
          "description" : "Indicates if the contact is an account administrator."
        },
        "TermsOfUseAccepted" : {
          "type" : "boolean",
          "description" : "Indicates if the contact already accepted Wild Apricot's terms of use."
        }
      }
    },
    "MembershipGroupListItem" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "integer",
          "description" : "Unique group identifier"
        },
        "Name" : {
          "type" : "string",
          "description" : "group name"
        },
        "Description" : {
          "type" : "string",
          "description" : "group description"
        }
      }
    },
    "MembershipGroup" : {
      "allOf" : [ {
        "$ref" : "#/definitions/MembershipGroupListItem"
      }, {
        "type" : "object",
        "properties" : {
          "ContactsCount" : {
            "type" : "integer",
            "description" : "Total count of group participants"
          },
          "ContactIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "description" : "Contact IDs of group participants."
            }
          }
        }
      } ]
    },
    "Bundle" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "integer",
          "description" : "Unique bundle identifier."
        },
        "Url" : {
          "$ref" : "#/definitions/ResourceUrl"
        },
        "Email" : {
          "type" : "string",
          "description" : "Email of bundle administrator."
        },
        "ParticipantsCount" : {
          "type" : "integer",
          "description" : "The number of members in the bundle."
        },
        "Administrator" : {
          "type" : "object",
          "allOf" : [ {
            "$ref" : "#/definitions/LinkedResource"
          }, {
            "description" : "Link to bundle administrator."
          } ]
        },
        "MembershipLevel" : {
          "type" : "object",
          "allOf" : [ {
            "$ref" : "#/definitions/LinkedResource"
          }, {
            "description" : "Link to membership level related to this bundle."
          } ]
        },
        "SpacesLeft" : {
          "type" : "integer",
          "description" : "If bundle size is limited, then this field indicates number of vacant spaces left in the bundle."
        },
        "Members" : {
          "type" : "array",
          "description" : "Collection of links to members of the bundle.",
          "items" : {
            "$ref" : "#/definitions/LinkedResource"
          }
        }
      }
    },
    "Contact" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "integer",
          "description" : "Unique contact identifier."
        },
        "Url" : {
          "$ref" : "#/definitions/ResourceUrl"
        },
        "FirstName" : {
          "type" : "string",
          "description" : "Shortcut for custom field value with system code 'FirstName'"
        },
        "LastName" : {
          "type" : "string",
          "description" : "Shortcut for custom field value with system code 'LastName'"
        },
        "Organization" : {
          "type" : "string",
          "description" : "Shortcut for custom field value with system code 'Organization'"
        },
        "Email" : {
          "type" : "string",
          "description" : "Contact primary email, shortcut for custom field value with system code 'Email'. Should be unique in account."
        },
        "DisplayName" : {
          "type" : "string",
          "description" : "Combination of names or organization or email. Value depends on presence of values. It could be used to display contact record on lists."
        },
        "ProfileLastUpdated" : {
          "type" : "string",
          "format" : "date",
          "description" : "Timestamp of last contact details modification. Complies with ISO8601 format. The date and time that common fields, membership fields, or member group participation were last updated for the contact."
        },
        "MembershipLevel" : {
          "type" : "object",
          "allOf" : [ {
            "$ref" : "#/definitions/LinkedResourceWithName"
          }, {
            "description" : "Information about current membership level assigned to the contact. If the contact is not a member, then the MembershipLevel field is not included in the results."
          } ]
        },
        "MembershipEnabled" : {
          "type" : "boolean",
          "description" : "Indicates whether the contact is a member. A value of false indicates that the contact is a not a member or is a suspended member."
        },
        "Status" : {
          "type" : "string",
          "description" : "The status of the contact's membership. The status is only included in the results if the contact is a member.",
          "enum" : [ "Active", "Lapsed", "PendingNew", "PendingRenewal", "PendingUpgrade" ]
        },
        "IsAccountAdministrator" : {
          "type" : "boolean",
          "description" : "Indicates if the contact is an account administrator."
        },
        "TermsOfUseAccepted" : {
          "type" : "boolean",
          "description" : "Indicates if the contact already accepted Wild Apricot's terms of use."
        },
        "FieldValues" : {
          "type" : "array",
          "description" : "For each custom field you have added to your Wild Apricot database, the name of the field, its system code, and its value for this contact are returned. The system code is a unique field identifier that can be used instead of the field name to identify the field. As well, a number of system fields are returned. If a custom field is restricted to certain access levels, then CustomAccessLevel indicates the level to which the field is restricted. Possible values are AdminOnly, Member, and Public.",
          "items" : {
            "$ref" : "#/definitions/ContactFieldValue"
          }
        }
      }
    },
    "contactExtendedMembershipInfo" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "integer",
          "description" : "Unique contact identifier."
        },
        "Url" : {
          "$ref" : "#/definitions/ResourceUrl"
        },
        "FirstName" : {
          "type" : "string",
          "description" : "Shortcut for custom field value with system code 'FirstName'"
        },
        "LastName" : {
          "type" : "string",
          "description" : "Shortcut for custom field value with system code 'LastName'"
        },
        "Organization" : {
          "type" : "string",
          "description" : "Shortcut for custom field value with system code 'Organization'"
        },
        "Email" : {
          "type" : "string",
          "description" : "Contact primary email, shortcut for custom field value with system code 'Email'. Should be unique in account."
        },
        "DisplayName" : {
          "type" : "string",
          "description" : "Combination of names or organization or email. Value depends on presence of values. It could be used to display contact record on lists."
        },
        "ProfileLastUpdated" : {
          "type" : "string",
          "format" : "date",
          "description" : "Timestamp of last contact details modification. Complies with ISO8601 format. The date and time that common fields, membership fields, or member group participation were last updated for the contact."
        },
        "MembershipLevel" : {
          "type" : "object",
          "allOf" : [ {
            "$ref" : "#/definitions/LinkedResourceWithName"
          }, {
            "description" : "Information about current membership level assigned to the contact. If the contact is not a member, then the MembershipLevel field is not included in the results."
          } ]
        },
        "MembershipEnabled" : {
          "type" : "boolean",
          "description" : "Indicates whether the contact is a member. A value of false indicates that the contact is a not a member or is a suspended member."
        },
        "Status" : {
          "type" : "string",
          "description" : "The status of the contact's membership. The status is only included in the results if the contact is a member.",
          "enum" : [ "Active", "Lapsed", "PendingNew", "PendingRenewal", "PendingUpgrade" ]
        },
        "ExtendedMembershipInfo" : {
          "$ref" : "#/definitions/ExtendedMembershipInfo"
        },
        "IsAccountAdministrator" : {
          "type" : "boolean",
          "description" : "Indicates if the contact is an account administrator."
        },
        "TermsOfUseAccepted" : {
          "type" : "boolean",
          "description" : "Indicates if the contact already accepted Wild Apricot's terms of use."
        },
        "FieldValues" : {
          "type" : "array",
          "description" : "For each custom field you have added to your Wild Apricot database, the name of the field, its system code, and its value for this contact are returned. The system code is a unique field identifier that can be used instead of the field name to identify the field. As well, a number of system fields are returned. If a custom field is restricted to certain access levels, then CustomAccessLevel indicates the level to which the field is restricted. Possible values are AdminOnly, Member, and Public.",
          "items" : {
            "$ref" : "#/definitions/ContactFieldValue"
          }
        }
      }
    },
    "ContactFieldAccessLevel" : {
      "type" : "string",
      "description" : "\nIndicates who is allowed to view the field value. - **Public** - value is visible to anyone who has access to members directory - **Members** - value is visible only to members - **Nobody* - value is visible only to account administrators\n",
      "enum" : [ "Public", "Members", "Nobody" ]
    },
    "ContactFieldDescription" : {
      "allOf" : [ {
        "$ref" : "#/definitions/EntityFieldDescription"
      }, {
        "type" : "object"
      }, { }, {
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Unique field identifier."
          },
          "Access" : {
            "$ref" : "#/definitions/ContactFieldAccessLevel"
          },
          "AdminOnly" : {
            "type" : "boolean",
            "description" : "Indicates that the field is accessible only by administrators."
          },
          "ExistsInLevels" : {
            "type" : "array",
            "description" : "If field is defined for specific levels only, this contains list of membership levels.",
            "items" : {
              "$ref" : "#/definitions/LinkedResource"
            }
          },
          "MemberAccess" : {
            "$ref" : "#/definitions/MemberFieldAccess"
          },
          "MemberOnly" : {
            "type" : "boolean",
            "description" : "Indicates whether the field is a membership field."
          },
          "IsBuiltIn" : {
            "type" : "boolean",
            "description" : "The field is a built-in system field, it cannot be edited or deleted."
          },
          "SupportSearch" : {
            "type" : "boolean",
            "description" : "Indicates that this field can be used in $filter expression in contact search."
          },
          "IsEditable" : {
            "type" : "boolean",
            "description" : "Indicates that the field's value can be changed with create/update requests. Otherwise value can’t be edited through API. If non-editable field value is provided in create/update contact request, the value is ignored by API."
          },
          "RulesAndTermsInfo" : {
            "$ref" : "#/definitions/RulesAndTermsInfo"
          },
          "RenewalPolicy" : {
            "$ref" : "#/definitions/RenewalPolicy"
          },
          "ProrateInApplication" : {
            "type" : "boolean",
            "description" : "If the field has associated cost, this indicates if the cost should be prorated over a partial period of time."
          }
        }
      } ]
    },
    "ContactFieldValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FieldValue"
      }, {
        "type" : "object",
        "properties" : {
          "CustomAccessLevel" : {
            "$ref" : "#/definitions/ContactFieldAccessLevel"
          }
        }
      } ]
    },
    "ContactIdsResponse" : {
      "type" : "object",
      "properties" : {
        "ContactIdentifiers" : {
          "type" : "array",
          "description" : "List of contact identifiers that match request criteria. The field appears only if idsOnly parameter was passed in request.",
          "items" : {
            "type" : "integer"
          }
        }
      }
    },
    "ContactsAsyncResponse" : {
      "type" : "object",
      "properties" : {
        "ResultId" : {
          "type" : "string",
          "description" : "Unique result identifier."
        },
        "ResultUrl" : {
          "type" : "string",
          "description" : "URL to check async result availability. We expect that client application will check this URL with some small delay (every 5 sec) until API returns a list of contacts or ProcessingState==Failed."
        },
        "Requested" : {
          "type" : "string",
          "format" : "datetime",
          "description" : "Date and time when the request was queued for processing."
        },
        "Processed" : {
          "type" : "string",
          "format" : "datetime",
          "description" : "Date and time when the request was processed."
        },
        "ProcessingState" : {
          "type" : "string",
          "description" : "Asynchronous request state. It starts from Waiting, then server process it. Request may end in one of final states: Complete or Failed.",
          "enum" : [ "Waiting", "Processing", "Complete", "Failed" ]
        },
        "InitialQuery" : {
          "$ref" : "#/definitions/ContactsAsyncResponse_InitialQuery"
        },
        "ErrorDetails" : {
          "type" : "string",
          "description" : "In case of error, provides description of error occured."
        }
      }
    },
    "ContactsCountResponse" : {
      "type" : "object",
      "properties" : {
        "Count" : {
          "type" : "integer",
          "description" : "Number of contacts that match request criteria. This field appears only if $count parameter was passed in request."
        }
      }
    },
    "ContactsListResponse" : {
      "type" : "object",
      "properties" : {
        "Contacts" : {
          "type" : "array",
          "description" : "List of contacts that match request criteria.",
          "items" : {
            "$ref" : "#/definitions/Contact"
          }
        }
      }
    },
    "ContactsResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContactsAsyncResponse"
      }, {
        "$ref" : "#/definitions/ContactIdsResponse"
      }, {
        "$ref" : "#/definitions/ContactsCountResponse"
      }, {
        "$ref" : "#/definitions/ContactsListResponse"
      } ]
    },
    "CreateContactFieldParams" : {
      "allOf" : [ {
        "$ref" : "#/definitions/EditContactFieldParams"
      }, {
        "type" : "object",
        "required" : [ "FieldType" ],
        "properties" : {
          "FieldType" : {
            "type" : "string",
            "description" : "Field data type.",
            "enum" : [ "Text", "MultilineText", "MultipleChoice", "MultipleChoiceWithExtraCharge", "RadioButtons", "RadioButtonsWithExtraCharge", "Dropdown", "Picture", "RulesAndTerms", "Date", "ExtraChargeCalculation", "SectionDivider" ]
          },
          "MemberOnly" : {
            "type" : "boolean",
            "description" : "Indicates whether a field is available only to members."
          }
        }
      } ]
    },
    "CreateContactParams" : {
      "type" : "object",
      "properties" : {
        "FirstName" : {
          "type" : "string",
          "description" : "Shortcut for custom field with system code 'FirstName'"
        },
        "LastName" : {
          "type" : "string",
          "description" : "Shortcut for custom field with system code 'LastName'"
        },
        "Organization" : {
          "type" : "string",
          "description" : "Shortcut for custom field with system code 'Organization'"
        },
        "Email" : {
          "type" : "string",
          "description" : "Contact primary email, shortcut for custom field with system code 'Email'. Should be unique in account."
        },
        "MembershipLevel" : {
          "$ref" : "#/definitions/CreateContactParams_MembershipLevel"
        },
        "MembershipEnabled" : {
          "type" : "boolean",
          "description" : "Indicates whether the contact has membership. False means that the contact is a not a member or the membership is suspended."
        },
        "Status" : {
          "type" : "string",
          "description" : "The status of the membership. The status is only included in the results if the contact is a member.",
          "enum" : [ "Active", "Lapsed", "PendingNew", "PendingRenewal", "PendingUpgrade" ]
        },
        "Password" : {
          "type" : "string",
          "description" : "New password to assign. If you don't want to change password, just skip this field."
        },
        "FieldValues" : {
          "type" : "array",
          "description" : "An array of field values to assign to contact.",
          "items" : {
            "$ref" : "#/definitions/FieldValue"
          }
        },
        "RecreateInvoice" : {
          "type" : "boolean",
          "description" : "Indicates whether to create invoice is required. Default value is **TRUE**"
        }
      }
    },
    "CustomFieldType" : {
      "type" : "string",
      "description" : "Custom field data type.",
      "enum" : [ "String", "DateTime", "Boolean", "Choice", "MultipleChoice", "Number", "SectionDivider", "CalculatedExtraCharge", "Picture" ]
    },
    "EditContactFieldParams" : {
      "type" : "object",
      "required" : [ "FieldName" ],
      "properties" : {
        "FieldName" : {
          "type" : "string",
          "description" : "New field name. Must be unique."
        },
        "IsRequired" : {
          "type" : "boolean",
          "description" : "Indicates whether a field has to be filled before the form is submitted. This limitation affects member-facing functionality only, admin always can submit form even without required fields."
        },
        "AdminOnly" : {
          "type" : "boolean",
          "description" : "Indicates that the field is accessible only by administrators.",
          "default" : false
        },
        "Access" : {
          "$ref" : "#/definitions/ContactFieldAccessLevel"
        },
        "FieldInstructions" : {
          "type" : "string",
          "description" : "Shown as a tip when members or visitors fill in forms. Max length is 250 characters."
        },
        "Order" : {
          "type" : "integer",
          "description" : "Sorting order to display the field in UI."
        },
        "AllowedValues" : {
          "type" : "array",
          "description" : "List of allowed values for this field. This data is used for Choice and MultipleChoice fields, otherwise it will be ignored.",
          "items" : {
            "$ref" : "#/definitions/OptionsListItem"
          }
        },
        "RulesAndTermsInfo" : {
          "$ref" : "#/definitions/RulesAndTermsInfo"
        },
        "ExistsInLevels" : {
          "type" : "array",
          "description" : "Collection of membership levels where the field exists. If empty collection provided, it means the field would be available for all levels.",
          "items" : {
            "$ref" : "#/definitions/EditContactFieldParams_ExistsInLevels"
          }
        },
        "MemberAccess" : {
          "$ref" : "#/definitions/MemberFieldAccess"
        },
        "RenewalPolicy" : {
          "$ref" : "#/definitions/RenewalPolicy"
        },
        "ProrateInApplication" : {
          "type" : "boolean",
          "description" : "Whether the cost should be prorated over a partial period of time. Used only by fields with an associated cost."
        },
        "ExtraCharge" : {
          "$ref" : "#/definitions/ExtraCharge"
        }
      }
    },
    "ExtendedMembershipInfo" : {
      "type" : "object",
      "properties" : {
        "PendingMembershipOrderStatusType" : {
          "type" : "string",
          "enum" : [ "Invisible", "PendingNoCorrespondingInvoice", "PendingNotPaidYet", "InvoicePaidManualApprovalRequired", "FreeOrderManualApprovalRequired", "InvoiceNotPaidButOperationApproved", "MultipleInvoiceNotPaidMemberActivated", "MultipleInvoiceNotPaidMemberPending" ]
        },
        "PendingMembershipInvoice" : {
          "type" : "object",
          "allOf" : [ {
            "$ref" : "#/definitions/LinkedResource"
          }, {
            "description" : "Link to unpaid invoice, related to pending membership application."
          } ]
        },
        "AllowedActions" : {
          "type" : "array",
          "description" : "List of allowed actions related to contact. Each action is described with title and URL, which should be used in POST request.",
          "items" : {
            "$ref" : "#/definitions/LinkedResourceWithName"
          }
        }
      },
      "description" : "Readonly object "
    },
    "ExtraCharge" : {
      "type" : "object",
      "required" : [ "Multiplier", "MultiplierType" ],
      "properties" : {
        "MultiplierType" : {
          "type" : "string",
          "description" : "Indicates the type of multiplier field.\n  ItemPrice multiplier specifies a price for each requested item.\n  Percentage multiplier specifies a percent of field value to use as extra charge.\n",
          "enum" : [ "ItemPrice", "Percentage" ]
        },
        "Multiplier" : {
          "type" : "number",
          "format" : "decimal",
          "description" : "value of multiplier for extra charge calculation"
        },
        "MinAmount" : {
          "type" : "integer",
          "description" : "Minimal amount of items to request (minimal field value). For ItemPrice multiplier type only."
        },
        "MaxAmount" : {
          "type" : "integer",
          "description" : "Maximum amount of items to request (maximum field value). For ItemPrice multiplier type only."
        },
        "MinCharge" : {
          "type" : "number",
          "format" : "decimal",
          "description" : "Minimal extra charge. (minimal field value). For Percentage multiplier type only."
        },
        "MaxCharge" : {
          "type" : "number",
          "format" : "decimal",
          "description" : "Maximum extra charge. (maximum field value). For Percentage multiplier type only."
        }
      },
      "title" : "ExtraChargeOptions",
      "description" : "This property appears for CalculatedExtraCharge fields only."
    },
    "MemberFieldAccess" : {
      "type" : "string",
      "title" : "MemberAccess",
      "description" : "Controls whether the member is allowed to view or modify this field. Only for member fields.",
      "enum" : [ "EditInProfileAndInApplicationForm", "EditInProfile", "EditInApplicationForm", "ViewOnly", "Nobody" ]
    },
    "MembershipLevel" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "integer",
          "description" : "Unique membership level identifier"
        },
        "Name" : {
          "type" : "string",
          "description" : "level name"
        },
        "Description" : {
          "type" : "string",
          "description" : "level description"
        },
        "PublicCanApply" : {
          "type" : "boolean",
          "description" : "Indicates if non-member can apply for membership with this level."
        },
        "Type" : {
          "type" : "string",
          "description" : "Indicates if membership level is individual or bundle.",
          "enum" : [ "Individual", "Bundle" ]
        },
        "BundleMembersLimit" : {
          "type" : "integer",
          "description" : "Maximum number of bundle members. Empty for individuals."
        },
        "MembershipFee" : {
          "type" : "number",
          "description" : "Price of being a member with this level of membership. Price is for RenewalPeriod."
        },
        "MemberCanChangeToLevels" : {
          "type" : "array",
          "description" : "Member can switch from current level to one of levels from this list.",
          "items" : {
            "$ref" : "#/definitions/LinkedResource"
          }
        },
        "RenewalPeriod" : {
          "$ref" : "#/definitions/MembershipRenewalPeriod"
        }
      }
    },
    "MembershipRenewalPeriod" : {
      "type" : "object",
      "properties" : {
        "Kind" : {
          "type" : "string",
          "description" : "Period of renewal.",
          "enum" : [ "Never", "Monthly", "Quarterly", "TwiceAYear", "EveryNYears" ]
        },
        "StartFromJoinDate" : {
          "type" : "boolean",
          "description" : "Indicates if renewal period starts from join date. Otherwise, starts from dates specified in Dates field."
        },
        "Dates" : {
          "type" : "array",
          "description" : "Collection of renewal dates during a year.",
          "items" : {
            "$ref" : "#/definitions/MembershipRenewalPeriod_Dates"
          }
        },
        "AutomaticRecurringPayments" : {
          "type" : "boolean",
          "description" : "Indicates if recurring payments will be charged automatically."
        },
        "ApplicationReview" : {
          "$ref" : "#/definitions/MembershipRenewalPeriod_ApplicationReview"
        }
      },
      "description" : "Describes membership renewal period."
    },
    "OptionsListItem" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "integer",
          "description" : "Item identifier unique in the list"
        },
        "Label" : {
          "type" : "string",
          "description" : "Human-readable text label."
        },
        "Position" : {
          "type" : "integer",
          "description" : "Option position among other options."
        },
        "SelectedByDefault" : {
          "type" : "boolean",
          "description" : "Indicates whether this option would be selected on form if user did not select another option."
        },
        "ExtraCost" : {
          "type" : "number",
          "format" : "decimal",
          "description" : "Extra price for selecting this option. Used only by fields with an associated cost."
        }
      }
    },
    "RenewalPolicy" : {
      "type" : "object",
      "properties" : {
        "IncludeInRenewals" : {
          "type" : "boolean",
          "description" : "Indicates if the field should be shown in renewal form."
        },
        "AllowedToChangeInRenewal" : {
          "type" : "boolean",
          "description" : "Indicates whether field value can be changed during renual process. Can be set to TRUE only if IncludeInRenewals is set to TRUE."
        }
      },
      "description" : "Defines how system manages field during renewal process. Used only by multichoice fields with an associated cost."
    },
    "RulesAndTermsInfo" : {
      "type" : "object",
      "properties" : {
        "Text" : {
          "type" : "string",
          "description" : "Terms of use label."
        },
        "Link" : {
          "type" : "string",
          "description" : "Url of the rules and terms document."
        }
      },
      "description" : "Additional info for fields with rules / terms conditions. Not present for other field types."
    },
    "SavedSearchListItem" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "integer",
          "description" : "Unique search identifier"
        },
        "Name" : {
          "type" : "string",
          "description" : "Saved search name"
        },
        "Description" : {
          "type" : "string",
          "description" : "Save search description"
        }
      }
    },
    "SavedSearch" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SavedSearchListItem"
      }, {
        "type" : "object",
        "properties" : {
          "ContactIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "description" : "Contact IDs found by Saved Search."
            }
          }
        }
      } ]
    },
    "UpdateContactFieldParams" : {
      "allOf" : [ {
        "$ref" : "#/definitions/EditContactFieldParams"
      }, {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Unique identifier of existing field."
          }
        }
      } ]
    },
    "UpdateContactParams" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CreateContactParams"
      }, {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Unique contact identifier."
          }
        }
      } ]
    },
    "CloneEvent" : {
      "type" : "object",
      "properties" : {
        "EventId" : {
          "type" : "integer",
          "description" : "Identifier of existing event you want to clone."
        },
        "TitlePrefix" : {
          "type" : "string",
          "description" : "Prefix to be added to the event title to form the new title. For example if you are cloning the event \"Annual meetup\" and the prefix is \"yet another \", then the new event will have the title \"yet another Annual meetup\"."
        }
      }
    },
    "DeliveryStatus" : {
      "type" : "string",
      "description" : "Email delivery status.",
      "enum" : [ "Queued", "Delivered", "Failed" ]
    },
    "EmailDraft" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "integer",
          "description" : "Unique email draft identifier."
        },
        "Url" : {
          "$ref" : "#/definitions/ResourceUrl"
        },
        "CreatedDate" : {
          "type" : "string",
          "format" : "datetime",
          "description" : "Date and time when the draft was created."
        },
        "Type" : {
          "$ref" : "#/definitions/EmailDraftType"
        },
        "Subject" : {
          "type" : "string",
          "description" : "Value for email subject. It may contain macros, which will be replaced before delivery.\n"
        },
        "Body" : {
          "type" : "string",
          "description" : "Value for email body. Usually it is HTML content with macros, which will be replaced before delivery.\n"
        },
        "ReplyToName" : {
          "type" : "string",
          "description" : "Display name for reply to"
        },
        "ReplyToAddress" : {
          "type" : "string",
          "description" : "Email address to use as reply to."
        },
        "EventId" : {
          "type" : "integer",
          "description" : "Event identifier for which the draft has been started (if any)."
        },
        "Creator" : {
          "$ref" : "#/definitions/ShortContact"
        },
        "IsLinkTrackingAllowed" : {
          "type" : "boolean",
          "description" : "Indicates if email tracking is enabled for this email."
        },
        "Recipients" : {
          "$ref" : "#/definitions/EmailRecipients"
        },
        "LastChangedDate" : {
          "type" : "string",
          "format" : "datetime",
          "description" : "Date and time when the draft was last modified."
        },
        "Modifier" : {
          "$ref" : "#/definitions/ShortContact"
        },
        "IsScheduled" : {
          "type" : "boolean",
          "description" : "Indicates if draft delivery is scheduled for a particular date. See ScheduledDate value."
        },
        "ScheduledDate" : {
          "type" : "string",
          "format" : "datetime",
          "description" : "Date and time when the draft will be sent."
        }
      }
    },
    "emailDraftId" : {
      "type" : "integer",
      "title" : "emailDraftId",
      "description" : "email draft identifier"
    },
    "EmailDraftListResult" : {
      "type" : "object",
      "properties" : {
        "Emails" : {
          "type" : "array",
          "description" : "Collection of email drafts.",
          "items" : {
            "$ref" : "#/definitions/EmailDraft"
          }
        }
      }
    },
    "EmailDraftPreview" : {
      "type" : "object",
      "properties" : {
        "Subject" : {
          "type" : "string",
          "description" : "Email subject with macros applied."
        },
        "Body" : {
          "type" : "string",
          "description" : "Email body HTML with mosros applied."
        }
      },
      "description" : "Describes how email will look like when all macros are applied."
    },
    "EmailDraftType" : {
      "type" : "string",
      "enum" : [ "Unknown", "ContactBlast", "EventAttendees", "EventWaitlistPersons" ]
    },
    "EmailLog" : {
      "allOf" : [ {
        "$ref" : "#/definitions/EmailLogRecords"
      }, {
        "$ref" : "#/definitions/EmailLogIdentifiers"
      } ]
    },
    "EmailLogIdentifiers" : {
      "type" : "object",
      "properties" : {
        "EmailsIdentifiers" : {
          "type" : "array",
          "description" : "A collection of email log record identifiers.",
          "items" : {
            "type" : "integer",
            "description" : "Unique email identifier."
          }
        }
      }
    },
    "EmailLogRecord" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "integer",
          "description" : "Unique email identifier."
        },
        "Url" : {
          "$ref" : "#/definitions/ResourceUrl"
        },
        "SentDate" : {
          "type" : "string",
          "description" : "Date when email sending was started."
        },
        "Subject" : {
          "type" : "string",
          "description" : "Email subject."
        },
        "Body" : {
          "type" : "string",
          "description" : "Email body."
        },
        "ReplyToName" : {
          "type" : "string"
        },
        "ReplyToAddress" : {
          "type" : "string"
        },
        "Type" : {
          "$ref" : "#/definitions/EmailType"
        },
        "IsTrackingAllowed" : {
          "type" : "boolean"
        },
        "IsCopySentToAdmins" : {
          "type" : "boolean"
        },
        "SenderId" : {
          "type" : "integer"
        },
        "SenderName" : {
          "type" : "string"
        },
        "SendingType" : {
          "$ref" : "#/definitions/InitializationSourceType"
        },
        "Origin" : {
          "$ref" : "#/definitions/EmailOrigin"
        },
        "SubOriginId" : {
          "type" : "integer"
        },
        "RecipientCount" : {
          "type" : "integer"
        },
        "ReadCount" : {
          "type" : "integer"
        },
        "UniqueLinkClickCount" : {
          "type" : "integer"
        },
        "SuccessfullySentCount" : {
          "type" : "integer"
        },
        "RecipientsThatClickedAnyLinkCount" : {
          "type" : "integer"
        },
        "FailedCount" : {
          "type" : "integer"
        },
        "InProgress" : {
          "type" : "boolean"
        },
        "Recipient" : {
          "description" : "only if email has a single recipient",
          "$ref" : "#/definitions/EmailRecipient"
        }
      }
    },
    "EmailLogRecords" : {
      "type" : "object",
      "properties" : {
        "Emails" : {
          "type" : "array",
          "description" : "Collection of email log records.\n",
          "items" : {
            "$ref" : "#/definitions/EmailLogRecord"
          }
        }
      }
    },
    "EmailOrigin" : {
      "type" : "object",
      "properties" : {
        "OriginType" : {
          "$ref" : "#/definitions/EmailOriginType"
        },
        "Id" : {
          "type" : "integer",
          "description" : "Unique origin identifier."
        },
        "Name" : {
          "type" : "string"
        }
      }
    },
    "EmailOriginType" : {
      "type" : "string",
      "description" : "Email origin type.",
      "enum" : [ "System", "Contact", "MembershipLevel", "Event", "Donation", "WebPage", "ForumTopicSubscription", "FinancialDocument", "NewPasswordEmail" ]
    },
    "EmailRecipient" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "integer",
          "description" : "If email was sent to individual recipient, this field contains contact identifier.\nIf email was sent to all recipients from some saved search, this field contains saved search identifier.\n"
        },
        "Type" : {
          "type" : "integer",
          "description" : "Recipient group type."
        },
        "Name" : {
          "type" : "string",
          "description" : "Display name of recipient or name of saved search."
        },
        "Email" : {
          "type" : "string",
          "description" : "recipient email. for IndividualRecipient and SentEmailRecipient types only"
        }
      }
    },
    "EmailRecipients" : {
      "type" : "array",
      "description" : "Collection of recipients.",
      "items" : {
        "$ref" : "#/definitions/EmailRecipient"
      }
    },
    "EmailRecipientsParams" : {
      "type" : "object",
      "properties" : {
        "Recipients" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EmailRecipient"
          }
        },
        "ContextEventId" : {
          "type" : "integer",
          "description" : "context event identifier. not required. for Event related recipient types only"
        }
      },
      "title" : "EmailRecipientsParams",
      "description" : "list of email recipient groups"
    },
    "EmailScheduleParams" : {
      "type" : "object",
      "properties" : {
        "DraftId" : {
          "type" : "integer",
          "description" : "Unique email draft identifier."
        },
        "ScheduleDate" : {
          "type" : "string",
          "format" : "datetime",
          "description" : "Date and time scheduled for sending."
        },
        "IsScheduled" : {
          "type" : "boolean",
          "description" : "Indicates if draft is scheduled for delivery. Set False to pause."
        }
      }
    },
    "EmailType" : {
      "type" : "string",
      "description" : "The reason why the email was sent.",
      "enum" : [ "Unknown", "MemberApplication_ActivationEmail", "MemberApplication_InitiationEmail", "MemberApplication_BundleMember_ActivationEmail", "MemberApplication_BundleAdmin_ActivationEmail", "MemberRenewal_FreeRenewal", "MemberRenewal_RenewalPending", "MemberRenewal_RenewalConfirmed", "MemberRenewal_RenewalCanceledByMember", "MemberRenewal_MemberRenewal_RecurringRenewalFailed", "MemberRenewal_Online_PaymentSuccessfull", "MemberRenewal_AdvanceRenewalReminder1", "MemberRenewal_AdvanceRenewalReminder2", "MemberRenewal_RenewalDateNotice", "MemberRenewal_GracePeriod", "MemberRenewal_Lapsed", "MemberLevelChange_InitiationEmail", "MemberLevelChange_ActivationEmail", "Donation_Confirmation", "EventRegistration_OfflinePayment_FreeLevelConfirmationEmail", "EventRegistration_OfflinePayment_PaidLevelConfirmationEmail", "EventRegistration_OfflinePayment_PaidLevelPendingEmail", "EventRegistration_NewWaitlistEntryEmail", "EventRegistration_CanceledEmail", "EventRegistration_OnlinePayment_PaidLevelConfirmationEmail", "EventRegistration_Reminder1", "EventRegistration_Reminder2", "EventRegistration_Reminder3", "EventRegistration_Announcement1", "EventRegistration_Announcement2", "EventRegistration_Announcement3", "EmailBlast_Members", "EmailBlast_Registrations", "EmailBlast_WaitlistPersons", "Finances_Invoice", "Finances_PaymentReceipt", "Finances_DonationReceipt", "Finances_RefundNote", "Contact_Password", "SubscriptionForm_Confirmation", "Public_MemberToMemberEmail", "ForgottenPasswordRequest", "ForumNotification", "ForumTopicNotification" ]
    },
    "InitializationSourceType" : {
      "type" : "string",
      "description" : "Email initialization source type.",
      "enum" : [ "Automatic", "Manual" ]
    },
    "SendDraftParams" : {
      "type" : "object",
      "properties" : {
        "DraftId" : {
          "type" : "integer",
          "description" : "Unique email draft identifier."
        }
      }
    },
    "SendEmailParams" : {
      "type" : "object",
      "properties" : {
        "Subject" : {
          "type" : "string",
          "description" : "Subject of email message. May contain macros."
        },
        "Body" : {
          "type" : "string",
          "description" : "Email body in HTML format. May contain macros."
        },
        "Recipients" : {
          "$ref" : "#/definitions/EmailRecipients"
        },
        "EventId" : {
          "type" : "integer",
          "description" : "Unique event identifier. Required if email should be sent to event-related recipients, e.g. all attendees.\n  See EmailRecipient description for details.\n"
        }
      }
    },
    "ShortContact" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "integer",
          "description" : "Unique contact identifier."
        },
        "Url" : {
          "$ref" : "#/definitions/ResourceUrl"
        },
        "FirstName" : {
          "type" : "string",
          "description" : "Contact first name"
        },
        "LastName" : {
          "type" : "string",
          "description" : "Contact last name"
        }
      }
    },
    "EventRegistration" : {
      "type" : "object",
      "required" : [ "Contact", "DisplayName", "Event", "Id", "IsCheckedIn", "IsGuestRegistration", "IsPaid", "Organization", "PaidSum", "RegistrationDate", "RegistrationFee", "RegistrationType", "RegistrationTypeId", "ShowToPublic", "Url" ],
      "properties" : {
        "Id" : {
          "type" : "integer",
          "description" : "Unique identifier of event registration"
        },
        "Url" : {
          "$ref" : "#/definitions/ResourceUrl"
        },
        "Event" : {
          "$ref" : "#/definitions/EventStub"
        },
        "Contact" : {
          "$ref" : "#/definitions/LinkedResourceWithName"
        },
        "RegistrationType" : {
          "$ref" : "#/definitions/LinkedResourceWithName"
        },
        "RegistrationTypeId" : {
          "type" : "integer",
          "description" : "Unique identifier of event registration type"
        },
        "GuestRegistrationsSummary" : {
          "$ref" : "#/definitions/GuestRegistrationsSummary"
        },
        "DisplayName" : {
          "type" : "string",
          "description" : "Contact display name."
        },
        "Organization" : {
          "type" : "string",
          "description" : "Contact display name."
        },
        "IsCheckedIn" : {
          "type" : "boolean",
          "description" : "Indicates if registrant is already checked in for event.",
          "default" : false
        },
        "RegistrationFee" : {
          "type" : "number",
          "format" : "decimal",
          "description" : "The fee for this registration including all extra charges and taxes."
        },
        "PaidSum" : {
          "type" : "number",
          "format" : "decimal",
          "description" : "The sum that the registrant has already paid for the registration."
        },
        "IsPaid" : {
          "type" : "boolean",
          "description" : "Indicates if the registrant has already paid for the registration.",
          "default" : false
        },
        "RegistrationFields" : {
          "type" : "array",
          "description" : "A collection of registration fields values",
          "items" : {
            "$ref" : "#/definitions/FieldValue"
          }
        },
        "ShowToPublic" : {
          "type" : "boolean",
          "description" : "Indicates whether this registration can be shown to other event registrants.",
          "default" : false
        },
        "RegistrationDate" : {
          "type" : "string",
          "format" : "datetime",
          "description" : "Date and time when registration was created. (Account local time)"
        },
        "Memo" : {
          "type" : "string",
          "description" : "Some additional notes about this registration."
        },
        "IsGuestRegistration" : {
          "type" : "boolean",
          "description" : "Boolean. True if this is a guest registration, otherwise false.",
          "default" : false
        },
        "RecreateInvoice" : {
          "type" : "boolean",
          "description" : "Optional boolean value. If specified and equals true, related invoice will be automatically updated (or created) to match selected registration type and extra cost options.",
          "default" : false
        },
        "ParentRegistration" : {
          "$ref" : "#/definitions/LinkedResource"
        },
        "OnWaitlist" : {
          "type" : "boolean",
          "description" : "True if this is a waitlisted registration, otherwise false."
        }
      }
    },
    "EventRegistrationPost" : {
      "type" : "object",
      "required" : [ "Contact", "Event", "RegistrationTypeId" ],
      "properties" : {
        "Id" : {
          "type" : "integer",
          "description" : "Unique identifier of event registration"
        },
        "Url" : {
          "$ref" : "#/definitions/ResourceUrl"
        },
        "Event" : {
          "$ref" : "#/definitions/EventRegistrationPost_Event"
        },
        "Contact" : {
          "$ref" : "#/definitions/EventRegistrationPost_Event"
        },
        "RegistrationTypeId" : {
          "type" : "integer",
          "description" : "Unique identifier of event registration type"
        },
        "GuestRegistrationsSummary" : {
          "$ref" : "#/definitions/GuestRegistrationsSummary"
        },
        "IsCheckedIn" : {
          "type" : "boolean",
          "description" : "Indicates if registrant is already checked in on event.",
          "default" : false
        },
        "RegistrationFields" : {
          "type" : "array",
          "description" : "A collection of registration fields values",
          "items" : {
            "$ref" : "#/definitions/FieldValue"
          }
        },
        "ShowToPublic" : {
          "type" : "boolean",
          "description" : "Indicates whether this registration can be shown to other event registrants.",
          "default" : false
        },
        "RegistrationDate" : {
          "type" : "string",
          "format" : "datetime",
          "description" : "Date and time when registration was created. (Account local time)"
        },
        "Memo" : {
          "type" : "string",
          "description" : "Some additional notes about this registration."
        },
        "RecreateInvoice" : {
          "type" : "boolean",
          "description" : "Optional boolean value. If specified and equals true, related invoice will be automatically updated (or created) to match selected registration type and extra cost options.",
          "default" : false
        }
      }
    },
    "EventRegistrationPut" : {
      "type" : "object",
      "required" : [ "Id" ],
      "properties" : {
        "Id" : {
          "type" : "integer",
          "description" : "Unique identifier of event registration"
        },
        "RegistrationTypeId" : {
          "type" : "integer",
          "description" : "Unique identifier of event registration type"
        },
        "IsCheckedIn" : {
          "type" : "boolean",
          "description" : "Indicates if registrant is already checked in on event."
        },
        "RegistrationFields" : {
          "type" : "array",
          "description" : "A collection of registration fields values",
          "items" : {
            "$ref" : "#/definitions/FieldValue"
          }
        },
        "ShowToPublic" : {
          "type" : "boolean",
          "description" : "Indicates whether this registration can be shown to other event registrants."
        },
        "Memo" : {
          "type" : "string",
          "description" : "Some additional notes about this registration."
        },
        "GuestRegistrationsSummary" : {
          "$ref" : "#/definitions/GuestRegistrationsSummary"
        },
        "RecreateInvoice" : {
          "type" : "boolean",
          "description" : "Optional boolean value. If specified and equals true, related invoice will be automatically updated (or created) to match selected registration type and extra cost options."
        }
      }
    },
    "EventRegistrationsResponse" : {
      "type" : "array",
      "description" : "List of event registrations that matches request criteria.",
      "items" : {
        "$ref" : "#/definitions/EventRegistration"
      }
    },
    "EventStub" : {
      "properties" : {
        "Id" : {
          "type" : "integer",
          "description" : "Event identifier."
        },
        "Url" : {
          "description" : "Event Url to get event details from API.",
          "$ref" : "#/definitions/ResourceUrl"
        },
        "Name" : {
          "type" : "string",
          "description" : "Event title."
        },
        "StartDate" : {
          "type" : "string",
          "format" : "datetime",
          "description" : "Date and time when the event is scheduled to start."
        },
        "EndDate" : {
          "type" : "string",
          "format" : "datetime",
          "description" : "Date and time when the event is scheduled to end. Could be empty."
        },
        "Location" : {
          "type" : "string",
          "description" : "Location where the event will take place."
        }
      }
    },
    "GuestRegistrationsSummary" : {
      "properties" : {
        "NumberOfGuests" : {
          "type" : "integer",
          "description" : "Number of guests registered along with the registrant. If event registration type requires guests registration with details (contact information, etc.), this value is 0."
        },
        "NumberOfGuestsCheckedIn" : {
          "type" : "integer",
          "description" : "Number of guests who already checked in. If event registration type requires guests registration with details (contact information, etc.), this value is null."
        },
        "GuestRegistrations" : {
          "type" : "array",
          "description" : "List of guest registrations links. If event registration type expects guest registration by number (without contact information), this value is null. This value cannot be saved or updated using API.\n",
          "items" : {
            "$ref" : "#/definitions/LinkedResource"
          }
        }
      }
    },
    "EventRegistrationTypeEditParams" : {
      "type" : "object",
      "required" : [ "EventId" ],
      "properties" : {
        "Id" : {
          "type" : "integer",
          "description" : "Unique event identifier. This field should be provided only when updating existing event registration type"
        },
        "EventId" : {
          "type" : "integer",
          "description" : "Identifier of event related to the registration type."
        },
        "Name" : {
          "type" : "string",
          "description" : "Registraton type title. This field should be provided only when creating new registration type\n"
        },
        "IsEnabled" : {
          "type" : "boolean",
          "description" : "Indicates whether this registration type is enabled"
        },
        "Description" : {
          "type" : "string",
          "description" : "Plain text description for the event registration type."
        },
        "BasePrice" : {
          "type" : "number",
          "description" : "Base price registrant pays with this registration type."
        },
        "GuestPrice" : {
          "type" : "number",
          "description" : "Price for each additional guest."
        },
        "UseTaxScopeSettings" : {
          "type" : "boolean",
          "description" : "Indicates whether account tax scope settings should be used to calculate final price. ⚠ Once set, it has to be provided on every update. Otherwise, it will be overwritten to default value\n",
          "default" : false
        },
        "Availability" : {
          "$ref" : "#/definitions/EventRegistrationTypeAvailability"
        },
        "RegistrationCode" : {
          "type" : "string",
          "description" : "Registration code required to apply for event with this registration type. This property has value only if Availability is CodeRequired."
        },
        "AvailableForMembershipLevels" : {
          "type" : "array",
          "description" : "Which membership levels can apply for event. This property has value only if Availability is MembersOnly.",
          "items" : {
            "$ref" : "#/definitions/LinkedResource"
          }
        },
        "AvailableFrom" : {
          "type" : "string",
          "format" : "datetime",
          "description" : "This registration type is available starting from this date. Can be null. ⚠ Once set, it has to be provided on every update. Otherwise, it will be overwritten to null\n"
        },
        "AvailableThrough" : {
          "type" : "string",
          "format" : "datetime",
          "description" : "This registration type is available until this date. Can be null. ⚠ Once set, it has to be provided on every update. Otherwise, it will be overwritten to null\n"
        },
        "MaximumRegistrantsCount" : {
          "type" : "integer",
          "description" : "Maximum number of registrants for this registration type."
        },
        "GuestRegistrationPolicy" : {
          "$ref" : "#/definitions/EventGuestRegistrationPolicy"
        },
        "UnavailabilityPolicy" : {
          "$ref" : "#/definitions/EventRegistrationUnavailabilityPolicy"
        },
        "CancellationBehaviour" : {
          "$ref" : "#/definitions/EventRegistrationCancellationBehavior"
        },
        "CancellationDaysBeforeEvent" : {
          "type" : "integer",
          "description" : "If CancellationBehaviour = AllowUpToPeriodBeforeEvent, this field contains minimum number of days before the event that cancellations are allowed"
        },
        "IsWaitlistEnabled" : {
          "type" : "boolean",
          "description" : "Indicated whether registrant should be placed on waitlist if registrations have reached their limit."
        }
      }
    },
    "EventEditParams" : {
      "type" : "object",
      "required" : [ "EventType", "Name", "StartDate" ],
      "properties" : {
        "Id" : {
          "type" : "integer",
          "description" : "Unique identifier of event. This field should be provided only when updating existing event."
        },
        "Name" : {
          "type" : "string",
          "description" : "Event title"
        },
        "EventType" : {
          "type" : "string",
          "description" : "Indicates if event is simple (RSVP) or regular.",
          "enum" : [ "Reqular", "RSVP" ]
        },
        "StartDate" : {
          "type" : "string",
          "format" : "datetime",
          "description" : "Date and time when the event is scheduled to start."
        },
        "StartTimeSpecified" : {
          "type" : "boolean",
          "description" : "Indicates if event start time is specified. False means that StartDate contains only date component."
        },
        "EndDate" : {
          "type" : "string",
          "format" : "datetime",
          "description" : "Date and time when the event is scheduled to end. Could be empty."
        },
        "EndTimeSpecified" : {
          "type" : "boolean",
          "description" : "Indicates if event end time is specified. False means that EndDate contains only date component."
        },
        "Location" : {
          "type" : "string",
          "description" : "Location where the event will take place."
        },
        "RegistrationEnabled" : {
          "type" : "boolean",
          "description" : "Indicates that registration to this event is enabled"
        },
        "Tags" : {
          "type" : "array",
          "description" : "A collection of tags associated with the event.",
          "items" : {
            "type" : "string"
          }
        },
        "Details" : {
          "$ref" : "#/definitions/EventDetailsEditParams"
        },
        "Sessions" : {
          "type" : "array",
          "description" : "Collection of event sessions. Exist in multisessions events only.",
          "items" : {
            "$ref" : "#/definitions/EventSesssion"
          }
        },
        "RegistrationsLimit" : {
          "type" : "integer",
          "description" : "Maximum number of registrations for this event."
        }
      }
    },
    "EventDetailsEditParams" : {
      "type" : "object",
      "properties" : {
        "DescriptionHtml" : {
          "type" : "string",
          "description" : "Full event description in HTML format."
        },
        "PaymentInstructions" : {
          "type" : "string",
          "description" : "A description how attendee can pay for attendance in this event. Payment instructions for this event only."
        },
        "TimeZone" : {
          "$ref" : "#/definitions/TimeZone"
        },
        "AccessControl" : {
          "$ref" : "#/definitions/EventAccessControl"
        },
        "GuestRegistrationSettings" : {
          "$ref" : "#/definitions/EventGuestRegistrationSettings"
        },
        "Organizer" : {
          "$ref" : "#/definitions/EventDetailsEditParams_Organizer"
        },
        "PaymentMethod" : {
          "$ref" : "#/definitions/EventPaymentMethodType"
        },
        "RegistrationConfirmationExtraInfo" : {
          "type" : "string",
          "description" : "Additional event information to be inserted in registration confirmation email"
        },
        "RegistrationMessage" : {
          "type" : "string",
          "description" : "This text will be shown above Register button on Event details"
        },
        "SendEmailCopy" : {
          "type" : "boolean",
          "description" : "Indicates if email copy should be sent according to email routing setting."
        },
        "IsWaitlistEnabled" : {
          "type" : "boolean",
          "description" : "Indicates if waitlist feature is enabled to the event."
        },
        "WaitlistSettings" : {
          "$ref" : "#/definitions/EventWaitlistSettings"
        },
        "MultipleRegistrationAllowed" : {
          "type" : "boolean",
          "description" : "Indicates if it is allowed to have multiple registrations for the same contact."
        },
        "AttendeesDisplaySettings" : {
          "$ref" : "#/definitions/EventAttendeesDisplaySettings"
        }
      }
    },
    "CheckInParams" : {
      "type" : "object",
      "required" : [ "CheckedIn", "RegistrationId" ],
      "properties" : {
        "RegistrationId" : {
          "type" : "integer",
          "description" : "Event registration Id."
        },
        "CheckedIn" : {
          "type" : "boolean",
          "description" : "Check in (true) or check out (false)."
        },
        "CheckedInGuests" : {
          "type" : "integer",
          "description" : "For event registrations with anonymous guests (guests as number), sets number of checked-in guests."
        }
      }
    },
    "Event" : {
      "type" : "object",
      "required" : [ "EventType", "Id", "Name", "StartDate", "Url" ],
      "properties" : {
        "Id" : {
          "type" : "integer",
          "description" : "Unique event identifier"
        },
        "Url" : {
          "$ref" : "#/definitions/ResourceUrl"
        },
        "Name" : {
          "type" : "string",
          "description" : "Event title"
        },
        "EventType" : {
          "type" : "string",
          "description" : "Indicates if event is simple (RSVP) or regular.",
          "enum" : [ "Reqular", "RSVP" ]
        },
        "StartDate" : {
          "type" : "string",
          "format" : "datetime",
          "description" : "Date and time when the event is scheduled to start."
        },
        "StartTimeSpecified" : {
          "type" : "boolean",
          "description" : "Indicates if event start time is specified. False means that StartDate contains only date component."
        },
        "EndDate" : {
          "type" : "string",
          "format" : "datetime",
          "description" : "Date and time when the event is scheduled to end. Could be empty."
        },
        "EndTimeSpecified" : {
          "type" : "boolean",
          "description" : "Indicates if event end time is specified. False means that EndDate contains only date component."
        },
        "Location" : {
          "type" : "string",
          "description" : "Location where the event will take place."
        },
        "RegistrationEnabled" : {
          "type" : "boolean",
          "description" : "Indicates whether registration to this event is enabled"
        },
        "HasEnabledRegistrationTypes" : {
          "type" : "boolean",
          "description" : "Indicates that at least one registration type is enabled for this event."
        },
        "AccessLevel" : {
          "$ref" : "#/definitions/EventAccessLevel"
        },
        "Tags" : {
          "type" : "array",
          "description" : "A collection of tags associated with the event.",
          "items" : {
            "type" : "string"
          }
        },
        "Details" : {
          "$ref" : "#/definitions/EventDetails"
        },
        "Sessions" : {
          "type" : "array",
          "description" : "Collection of event sessions. Exist in multisessions events only.",
          "items" : {
            "$ref" : "#/definitions/EventSesssion"
          }
        },
        "RegistrationsLimit" : {
          "type" : "integer",
          "description" : "Maximum number of registrations for this event."
        },
        "InviteeStat" : {
          "$ref" : "#/definitions/EventInviteeStatistics"
        },
        "PendingRegistrationsCount" : {
          "type" : "integer",
          "description" : "Number of participants already registered for this event but not confirmed yet."
        },
        "ConfirmedRegistrationsCount" : {
          "type" : "integer",
          "description" : "Number of participants already registered for this event and already confirmed."
        },
        "CheckedInAttendeesNumber" : {
          "type" : "integer",
          "description" : "Number of attendees already checked in on this event."
        }
      }
    },
    "EventAccessControl" : {
      "type" : "object",
      "required" : [ "AccessLevel" ],
      "properties" : {
        "AccessLevel" : {
          "$ref" : "#/definitions/EventAccessLevel"
        },
        "AvailableForAnyLevel" : {
          "type" : "boolean",
          "description" : "If AccessLevel is Restricted, then indicates if the event is available to any member on any level."
        },
        "AvailableForLevels" : {
          "type" : "array",
          "description" : "Event is available to members who are on these levels.\nThis field appears only if AccessLevel is Restricted and AvailableForAnyLevel is false.",
          "items" : {
            "$ref" : "#/definitions/LinkedResource"
          }
        },
        "AvailableForAnyGroup" : {
          "type" : "boolean",
          "description" : "If AccessLevel is Restricted, then indicates if the event is available to any member in any membership group."
        },
        "AvailableForGroups" : {
          "type" : "array",
          "description" : "Event is available to members who are any of these groups.\nThis field appears only if AccessLevel is Restricted and AvailableForAnyGroup is false.",
          "items" : {
            "$ref" : "#/definitions/LinkedResource"
          }
        }
      },
      "description" : "Describes event availability."
    },
    "EventAccessLevel" : {
      "type" : "string",
      "description" : "\nEvent accessability.\n  - Public means event accessible for everyone\n  - AdminOnly means event accessible for administrators only\n  - Restricted means event accessible for specific membership levels or groups.",
      "enum" : [ "Public", "AdminOnly", "Restricted" ]
    },
    "EventAttendeesDisplaySettings" : {
      "type" : "object",
      "properties" : {
        "VisibleTo" : {
          "type" : "object",
          "allOf" : [ {
            "$ref" : "#/definitions/ContactFieldAccessLevel"
          }, {
            "description" : "Indicates who is allowed to see list of event registrants."
          } ]
        },
        "ShowPendingAttendees" : {
          "type" : "boolean",
          "description" : "Indicates if pending registrants should be included in the list of registrants."
        }
      },
      "description" : "Settings for section \"List of event registrants\" on UI."
    },
    "EventDetails" : {
      "type" : "object",
      "properties" : {
        "DescriptionHtml" : {
          "type" : "string",
          "description" : "Full event description in HTML format. Important - Links to images can be relative."
        },
        "PaymentInstructions" : {
          "type" : "string",
          "description" : "A description how registrant can pay for attendance to this event. Payment instructions for this event only."
        },
        "TimeZone" : {
          "$ref" : "#/definitions/TimeZone"
        },
        "RegistrationTypes" : {
          "type" : "array",
          "description" : "Collection of configured registration types for the event.",
          "items" : {
            "$ref" : "#/definitions/EventRegistrationType"
          }
        },
        "EventRegistrationFields" : {
          "type" : "array",
          "description" : "Collection of fields registrant should fill during registration process.",
          "items" : {
            "$ref" : "#/definitions/EventRegistrationFieldDescription"
          }
        },
        "TotalPaid" : {
          "type" : "number",
          "description" : "Total sum paid for all registrations to this event. This is a read-only property."
        },
        "TotalDue" : {
          "type" : "number",
          "description" : "Total sum due, but not necessarily paid yet for all registrations related to this event. This is a read-only property."
        },
        "AccessControl" : {
          "$ref" : "#/definitions/EventAccessControl"
        },
        "GuestRegistrationSettings" : {
          "$ref" : "#/definitions/EventGuestRegistrationSettings"
        },
        "Organizer" : {
          "type" : "object",
          "allOf" : [ {
            "$ref" : "#/definitions/LinkedResource"
          }, {
            "description" : "Link to contact who is designated as organizer for this event."
          } ]
        },
        "PaymentMethod" : {
          "$ref" : "#/definitions/EventPaymentMethodType"
        },
        "RegistrationConfirmationExtraInfo" : {
          "type" : "string",
          "description" : "Additional event information to be inserted in registration confirmation email"
        },
        "RegistrationMessage" : {
          "type" : "string",
          "description" : "This text will be shown above Register button on Event details"
        },
        "SendEmailCopy" : {
          "type" : "boolean",
          "description" : "Indicates if email copy should be sent according to email routing settings."
        },
        "IsWaitlistEnabled" : {
          "type" : "boolean",
          "description" : "Indicates if waitlist feature is enabled for the event."
        },
        "WaitlistSettings" : {
          "$ref" : "#/definitions/EventWaitlistSettings"
        },
        "MultipleRegistrationAllowed" : {
          "type" : "boolean",
          "description" : "Indicates if multiple registrations are allowed for the same contact."
        },
        "AttendeesDisplaySettings" : {
          "$ref" : "#/definitions/EventAttendeesDisplaySettings"
        }
      }
    },
    "EventGuestRegistrationPolicy" : {
      "type" : "string",
      "description" : "Describes how guests are registered. Allowed values are\n- Disabled - guest registration is not allowed - NumberOfGuests - number of guests should be specified. - CollectContactDetails - contact information should be collected for each guest. - CollectFullInfo - full registration info should be collected for each guest.",
      "enum" : [ "Disabled", "NumberOfGuests", "CollectContactDetails", "CollectFullInfo" ]
    },
    "EventGuestRegistrationSettings" : {
      "type" : "object",
      "properties" : {
        "Enabled" : {
          "type" : "boolean",
          "description" : "Indicates if guest registrations are allowed."
        },
        "CreateContactMode" : {
          "type" : "string",
          "description" : "Indicates whether guests are automatically added to database after the main registrant confirms the registration",
          "enum" : [ "NeverCreateContact", "CreateContactForAllGuests", "CreateContactForGuestsWithEmail" ]
        }
      },
      "description" : "Control how system works with guest registrations for specific event."
    },
    "EventInviteeStatistics" : {
      "type" : "object",
      "properties" : {
        "NotResponded" : {
          "type" : "integer",
          "description" : "Number of invitees who did not respond yet."
        },
        "NotAttended" : {
          "type" : "integer",
          "description" : "Number of invitees who answered NO to the invite."
        },
        "Attended" : {
          "type" : "integer",
          "description" : "Number of invitees who answered YES to the invite."
        },
        "MaybeAttended" : {
          "type" : "integer",
          "description" : "Number of invitees who answered MAY BE to the invite."
        }
      },
      "description" : "Statistics related to invitees to RSVP events."
    },
    "EventPaymentMethodType" : {
      "type" : "string",
      "description" : "How attendees can pay for the ticket.\n\n  - OnlineAndOffline\n  - OfflineOnly\n  - OnlineOnly",
      "enum" : [ "Undefined", "OnlineAndOffline", "OfflineOnly", "OnlineOnly" ]
    },
    "EventRegistrationCancellationBehavior" : {
      "type" : "string",
      "description" : "Indicates if it is possible for attendee to self-cancel event registration.",
      "enum" : [ "DoNotAllow", "AllowUpToPeriodBeforeEvent", "Allow" ]
    },
    "EventRegistrationFieldDescription" : {
      "allOf" : [ {
        "$ref" : "#/definitions/EntityFieldDescription"
      }, {
        "properties" : {
          "Kind" : {
            "type" : "string",
            "description" : "Indicated is the field is common for all contacts or custom for the event.",
            "enum" : [ "Common", "Custom" ]
          }
        }
      } ]
    },
    "EventRegistrationType" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "integer",
          "description" : "Unique event registration type identifier."
        },
        "Url" : {
          "$ref" : "#/definitions/ResourceUrl"
        },
        "IsEnabled" : {
          "type" : "boolean",
          "description" : "Indicates whether this registration type is enabled"
        },
        "EventId" : {
          "type" : "integer",
          "description" : "Identifier of event related to the registration type."
        },
        "Name" : {
          "type" : "string",
          "description" : "Registraton type title."
        },
        "Description" : {
          "type" : "string",
          "description" : "Plain text description for the event registration type."
        },
        "BasePrice" : {
          "type" : "number",
          "description" : "Base price registrant pays for this registration type."
        },
        "GuestPrice" : {
          "type" : "number",
          "description" : "Price for each additional guest."
        },
        "UseTaxScopeSettings" : {
          "type" : "boolean",
          "description" : "Indicates whether account tax scope settings should be used to calculate final price."
        },
        "Availability" : {
          "$ref" : "#/definitions/EventRegistrationTypeAvailability"
        },
        "RegistrationCode" : {
          "type" : "string",
          "description" : "Registration code required to apply for event with this registration type. This property has value only if Availability is CodeRequired."
        },
        "AvailableForMembershipLevels" : {
          "type" : "array",
          "description" : "Which membership levels can apply for event. This property has value only if Availability is MembersOnly.",
          "items" : {
            "$ref" : "#/definitions/LinkedResource"
          }
        },
        "AvailableFrom" : {
          "type" : "string",
          "format" : "datetime",
          "description" : "This registration type is available starting from this date. Can be null."
        },
        "AvailableThrough" : {
          "type" : "string",
          "format" : "datetime",
          "description" : "This registration type is available until this date. Can be null."
        },
        "MaximumRegistrantsCount" : {
          "type" : "integer",
          "description" : "Maximum number of registrants for this registration type."
        },
        "CurrentRegistrantsCount" : {
          "type" : "integer",
          "description" : "Current number of registrants for this registration type."
        },
        "GuestRegistrationPolicy" : {
          "$ref" : "#/definitions/EventGuestRegistrationPolicy"
        },
        "UnavailabilityPolicy" : {
          "$ref" : "#/definitions/EventRegistrationUnavailabilityPolicy"
        },
        "CancellationBehaviour" : {
          "$ref" : "#/definitions/EventRegistrationCancellationBehavior"
        },
        "CancellationDaysBeforeEvent" : {
          "type" : "integer",
          "description" : "In case if CancellationBehaviour = AllowUpToPeriodBeforeEvent, this field indicates the minimum number of days before the event that cancellations are allowed."
        },
        "IsWaitlistEnabled" : {
          "type" : "boolean",
          "description" : "Indicated if registrant should be added to waitlist if registrations have reached their limit."
        }
      }
    },
    "EventRegistrationTypeAvailability" : {
      "type" : "string",
      "description" : "Indicates who the registration type is available to.",
      "enum" : [ "Everyone", "MembersOnly", "CodeRequired" ]
    },
    "EventRegistrationTypeResponse" : {
      "type" : "array",
      "description" : "List of event registration types that match the request criteria.",
      "items" : {
        "$ref" : "#/definitions/EventRegistrationType"
      }
    },
    "EventRegistrationUnavailabilityPolicy" : {
      "type" : "string",
      "description" : "Indicates what is displayed if the registration type is not available for a particular visitor.",
      "enum" : [ "ShowDisabled", "Hide" ]
    },
    "EventSesssion" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "integer",
          "description" : "Unique event session identifier."
        },
        "Title" : {
          "type" : "string",
          "description" : "Automatically generated session title."
        },
        "StartDate" : {
          "type" : "string",
          "format" : "datetime",
          "description" : "Date and time when the event session is scheduled to start."
        },
        "StartTimeSpecified" : {
          "type" : "boolean",
          "description" : "Indicates if session start time is specified. False means that StartDate contains only date component."
        },
        "EndDate" : {
          "type" : "string",
          "format" : "datetime",
          "description" : "Date and time when the event session is scheduled to end. Could be empty."
        },
        "EndTimeSpecified" : {
          "type" : "boolean",
          "description" : "Indicates if session end time is specified. False means that EndDate contains only date component."
        }
      }
    },
    "EventWaitlistSettings" : {
      "type" : "object",
      "properties" : {
        "WaitlistType" : {
          "type" : "string",
          "description" : "Indicates how the waitlist works for the event.\n\n - None - waitlist is not enabled\n - Manual - people can be added to a waitlist and then automatically registered in the order they were added, as sufficient spaces open up\n - Auto - people can be added to a waitlist and then manually registered by an administrator or by themselves once spaces become available",
          "enum" : [ "None", "Manual", "Auto" ]
        },
        "InformationToCollect" : {
          "type" : "string",
          "description" : "Indicates what information should be collected for people being added to the waitlist.",
          "enum" : [ "None", "NameAndEmail", "ContactInformation", "RegistrationInformation" ]
        }
      }
    },
    "EventsCountResponse" : {
      "type" : "object",
      "properties" : {
        "Count" : {
          "type" : "integer",
          "description" : "Number of events that match request criteria. This field appears only if $count parameter was passed in request."
        }
      }
    },
    "EventsListResponse" : {
      "type" : "object",
      "properties" : {
        "Events" : {
          "type" : "array",
          "description" : "List of events that match request criteria.",
          "items" : {
            "$ref" : "#/definitions/Event"
          }
        }
      }
    },
    "EventIdsResponse" : {
      "type" : "object",
      "properties" : {
        "EventsIdentifiers" : {
          "type" : "array",
          "description" : "List of event identifiers that match request criteria. The field appears only if idsOnly parameter was passed in request.",
          "items" : {
            "type" : "integer"
          }
        }
      }
    },
    "EventsResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/EventIdsResponse"
      }, {
        "$ref" : "#/definitions/EventsListResponse"
      }, {
        "$ref" : "#/definitions/EventsCountResponse"
      } ]
    },
    "CreateFinanceDocument" : {
      "type" : "object",
      "properties" : {
        "Url" : {
          "$ref" : "#/definitions/ResourceUrl"
        },
        "Value" : {
          "type" : "number",
          "format" : "float"
        },
        "DocumentDate" : {
          "type" : "string",
          "format" : "date",
          "description" : "Document date."
        },
        "Contact" : {
          "type" : "object",
          "allOf" : [ {
            "$ref" : "#/definitions/LinkedResource"
          }, {
            "description" : "Link to contact assigned to the financial document."
          } ]
        },
        "CreatedDate" : {
          "type" : "string",
          "format" : "date",
          "description" : "Date and time when the document was created."
        },
        "CreatedBy" : {
          "type" : "object",
          "allOf" : [ {
            "$ref" : "#/definitions/LinkedResource"
          }, {
            "description" : "Link to contact who created the document. Could be null."
          } ]
        }
      }
    },
    "CreateInvoiceParams" : {
      "allOf" : [ {
        "$ref" : "#/definitions/EditInvoiceParams"
      }, { } ]
    },
    "PaymentListResponse" : {
      "type" : "object",
      "properties" : {
        "Payments" : {
          "type" : "array",
          "description" : "List of payments that match request criteria.",
          "items" : {
            "$ref" : "#/definitions/Payment"
          }
        }
      }
    },
    "AllocateInvoiceParams" : {
      "type" : "object",
      "properties" : {
        "InvoiceId" : {
          "type" : "integer",
          "description" : "Unique invoice identifier."
        },
        "Amount" : {
          "type" : "number",
          "description" : "Allocating amount."
        }
      }
    },
    "AuditItemsListResult" : {
      "type" : "object",
      "properties" : {
        "Items" : {
          "type" : "array",
          "description" : "List of audit log items that match request criteria.",
          "items" : {
            "$ref" : "#/definitions/AuditLogItem"
          }
        }
      }
    },
    "AuditLogItem" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "integer",
          "description" : "Unique identifier."
        },
        "Url" : {
          "$ref" : "#/definitions/ResourceUrl"
        },
        "Timestamp" : {
          "type" : "string",
          "format" : "date",
          "description" : "Item creation date."
        },
        "Contact" : {
          "type" : "object",
          "allOf" : [ {
            "$ref" : "#/definitions/LinkedResource"
          }, {
            "description" : "Link to related contact."
          } ]
        },
        "FirstName" : {
          "type" : "string",
          "description" : "Contact first name"
        },
        "LastName" : {
          "type" : "string",
          "description" : "Contact last name"
        },
        "Organization" : {
          "type" : "string",
          "description" : "Contact organization"
        },
        "Email" : {
          "type" : "string",
          "description" : "Contact primary email."
        },
        "Message" : {
          "type" : "string",
          "description" : "Log item text."
        },
        "Severity" : {
          "type" : "string",
          "description" : "Log item severity level.",
          "enum" : [ "Verbose", "Information", "AttentionRequired", "Warning", "Error", "Critical" ]
        },
        "OrderType" : {
          "type" : "string",
          "description" : "The origin of the audit log entry.",
          "enum" : [ "MembershipApplication", "MembershipRenewal", "MembershipLevelChange", "EventRegistration", "Donation", "ChangeBillingPlan", "ChangeBillingInfo", "LockInPlan", "AssociationRenewal" ]
        },
        "Properties" : {
          "type" : "object",
          "description" : "Collection of audit log item properties that contains all technical information about transaction and other linked documents.",
          "properties" : { }
        },
        "Document" : {
          "type" : "object",
          "allOf" : [ {
            "$ref" : "#/definitions/LinkedResource"
          }, {
            "description" : "Link to related document."
          } ]
        },
        "DocumentType" : {
          "type" : "string",
          "description" : "Related document type.",
          "enum" : [ "Invoice", "Payment", "CreditMemo", "Refund", "Adjustment", "DonationPayment", "InvoicePayment" ]
        },
        "DocumentAction" : {
          "type" : "string",
          "description" : "Action performed on related document type.",
          "enum" : [ "Created", "Changed", "Deleted", "Voided", "Custom" ]
        }
      }
    },
    "CreatePaymentModel" : {
      "type" : "object",
      "properties" : {
        "Value" : {
          "type" : "number",
          "format" : "float",
          "description" : "Payment amount."
        },
        "Invoices" : {
          "type" : "array",
          "description" : "If not null or empty then invoices with these IDs will be settled to new payment.",
          "items" : {
            "$ref" : "#/definitions/LinkedResource"
          }
        },
        "Contact" : {
          "type" : "object",
          "allOf" : [ {
            "$ref" : "#/definitions/LinkedResource"
          }, {
            "description" : "Link to contact who made the payment."
          } ]
        },
        "Tender" : {
          "$ref" : "#/definitions/LinkedResource"
        },
        "Comment" : {
          "type" : "string",
          "description" : "Internal note on payment. Visible to administrators only."
        },
        "PublicComment" : {
          "type" : "string",
          "description" : "Comment to payor. Visible to both administrators and payor."
        },
        "PaymentType" : {
          "$ref" : "#/definitions/PaymentType"
        }
      }
    },
    "CreateRefundParams" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CreateFinanceDocument"
      }, {
        "type" : "object",
        "properties" : {
          "Tender" : {
            "$ref" : "#/definitions/LinkedResourceWithName"
          },
          "Comment" : {
            "type" : "string",
            "description" : "Internal note on refund. Visible to administrators only."
          },
          "PublicComment" : {
            "type" : "string",
            "description" : "Comment on refund. Visible to both administrators and the person being refunded."
          },
          "SettledValue" : {
            "type" : "number",
            "format" : "float",
            "description" : "The previously settled amount of the payment."
          }
        }
      } ]
    },
    "DocumentParam" : {
      "type" : "object",
      "properties" : {
        "DocumentId" : {
          "type" : "integer",
          "description" : "Unique finance document identifier."
        }
      }
    },
    "EditInvoiceParams" : {
      "type" : "object",
      "properties" : {
        "Value" : {
          "type" : "number",
          "format" : "float"
        },
        "DocumentDate" : {
          "type" : "string",
          "format" : "date",
          "description" : "Document date."
        },
        "Contact" : {
          "$ref" : "#/definitions/EditInvoiceParams_Contact"
        },
        "CreatedBy" : {
          "$ref" : "#/definitions/EditInvoiceParams_CreatedBy"
        },
        "UpdatedDate" : {
          "type" : "string",
          "format" : "date",
          "description" : "Date and time when the document was last modified.  Could be null."
        },
        "UpdatedBy" : {
          "$ref" : "#/definitions/EditInvoiceParams_UpdatedBy"
        },
        "DocumentNumber" : {
          "type" : "string",
          "description" : "Invoice number."
        },
        "OrderType" : {
          "$ref" : "#/definitions/InvoiceOrderType"
        },
        "OrderDetails" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OrderDetailRecord"
          }
        },
        "Memo" : {
          "type" : "string",
          "description" : "Internal note on invoice. Visible to administrators only."
        },
        "PublicMemo" : {
          "type" : "string",
          "description" : "Comment on invoice. Visible to both administrators and the person being invoicec."
        }
      }
    },
    "FinanceDocument" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "integer",
          "description" : "Unique document identifier."
        },
        "Url" : {
          "$ref" : "#/definitions/ResourceUrl"
        },
        "Value" : {
          "type" : "number",
          "format" : "float"
        },
        "DocumentDate" : {
          "type" : "string",
          "format" : "date",
          "description" : "Document date."
        },
        "Contact" : {
          "type" : "object",
          "allOf" : [ {
            "$ref" : "#/definitions/LinkedResource"
          }, {
            "description" : "Link to contact who is assigned to the financial document."
          } ]
        },
        "CreatedDate" : {
          "type" : "string",
          "format" : "date",
          "description" : "Date and time when the document was created."
        },
        "CreatedBy" : {
          "type" : "object",
          "allOf" : [ {
            "$ref" : "#/definitions/LinkedResource"
          }, {
            "description" : "Link to contact who created the document. Could be null."
          } ]
        },
        "UpdatedDate" : {
          "type" : "string",
          "format" : "date",
          "description" : "Date and time when the document was last modified.  Could be null."
        },
        "UpdatedBy" : {
          "type" : "object",
          "allOf" : [ {
            "$ref" : "#/definitions/LinkedResource"
          }, {
            "description" : "Link to contact who modified the document. Could be null."
          } ]
        }
      }
    },
    "Invoice" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FinanceDocument"
      }, {
        "type" : "object",
        "properties" : {
          "DocumentNumber" : {
            "type" : "string",
            "description" : "Invoice number."
          },
          "IsPaid" : {
            "type" : "boolean",
            "description" : "Indicates if the invoice is fully paid."
          },
          "PaidAmount" : {
            "type" : "number",
            "description" : "Sum already paid for this invoice."
          },
          "OrderType" : {
            "$ref" : "#/definitions/InvoiceOrderType"
          },
          "EventRegistration" : {
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/definitions/LinkedResource"
            }, {
              "description" : "Link to related event registration or null."
            } ]
          },
          "OrderDetails" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/OrderDetailRecord"
            }
          },
          "Memo" : {
            "type" : "string",
            "description" : "Internal note on invoice. Visible to administrators only."
          },
          "PublicMemo" : {
            "type" : "string",
            "description" : "Comment on invoice. Visible to both administrators and the person being invoiced."
          },
          "VoidedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "When invoice is voided this field indicates date of void. Voided invoice does not affect balance. For regular invoices this field is null."
          }
        }
      } ]
    },
    "InvoiceIdsResponse" : {
      "type" : "object",
      "properties" : {
        "InvoiceIdentifiers" : {
          "type" : "array",
          "description" : "List of invoices identifiers that match request criteria. The field appears if idsOnly parameter was passed in request.",
          "items" : {
            "type" : "integer"
          }
        }
      }
    },
    "InvoiceListResponse" : {
      "type" : "object",
      "properties" : {
        "Invoices" : {
          "type" : "array",
          "description" : "List of invoices that match request criteria.",
          "items" : {
            "$ref" : "#/definitions/Invoice"
          }
        }
      }
    },
    "InvoiceOrderType" : {
      "type" : "string",
      "description" : "Type of invoice.",
      "enum" : [ "Undefined", "MembershipApplication", "MembershipRenewal", "MembershipLevelChange", "EventRegistration", "Donation" ]
    },
    "InvoicesResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/InvoiceIdsResponse"
      }, {
        "$ref" : "#/definitions/InvoiceListResponse"
      } ]
    },
    "OrderDetailRecord" : {
      "type" : "object",
      "properties" : {
        "Value" : {
          "type" : "number",
          "format" : "float",
          "description" : "Sum to pay for this item. Can be negative (discounts)."
        },
        "Notes" : {
          "type" : "string",
          "description" : "Comment to order detail"
        },
        "Taxes" : {
          "$ref" : "#/definitions/SalesTaxInfo"
        }
      }
    },
    "Payment" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FinanceDocument"
      }, {
        "type" : "object",
        "properties" : {
          "Tender" : {
            "$ref" : "#/definitions/LinkedResourceWithName"
          },
          "Comment" : {
            "type" : "string",
            "description" : "Internal note on payment. Visible to administrators only."
          },
          "PublicComment" : {
            "type" : "string",
            "description" : "Comment on payment. Visible to both administrators and payors."
          },
          "AllocatedValue" : {
            "type" : "number",
            "format" : "float",
            "description" : "Total amount allocated to another finance documents (invoices or refunds)."
          },
          "Type" : {
            "$ref" : "#/definitions/PaymentType"
          }
        }
      } ]
    },
    "PaymentAllocation" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "integer",
          "description" : "Unique identifier."
        },
        "Value" : {
          "type" : "number",
          "description" : "allocated amount."
        },
        "Invoice" : {
          "type" : "object",
          "allOf" : [ {
            "$ref" : "#/definitions/LinkedResource"
          }, {
            "description" : "Link to related invoice."
          } ]
        },
        "Payment" : {
          "type" : "object",
          "allOf" : [ {
            "$ref" : "#/definitions/LinkedResource"
          }, {
            "description" : "Link to related payment."
          } ]
        }
      },
      "description" : "Thhis object describes how payment is allocated among invoices."
    },
    "PaymentIdsResponse" : {
      "type" : "object",
      "properties" : {
        "PaymentIdentifiers" : {
          "type" : "array",
          "description" : "List of payment identifiers that match request criteria. The field appears if idsOnly parameter was passed in request.",
          "items" : {
            "type" : "integer"
          }
        }
      }
    },
    "PaymentType" : {
      "type" : "string",
      "description" : "Email origin type.",
      "enum" : [ "Unknown", "InvoicePayment", "DonationPayment" ]
    },
    "PaymentsResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PaymentIdsResponse"
      }, {
        "$ref" : "#/definitions/PaymentListResponse"
      } ]
    },
    "Refund" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FinanceDocument"
      }, {
        "type" : "object",
        "properties" : {
          "Tender" : {
            "$ref" : "#/definitions/LinkedResourceWithName"
          },
          "Comment" : {
            "type" : "string",
            "description" : "Internal note on refund. Visible to administrators only."
          },
          "PublicComment" : {
            "type" : "string",
            "description" : "Comment on refund. Visible to both administrators and person being refunded."
          },
          "SettledValue" : {
            "type" : "number",
            "format" : "float",
            "description" : "Total amount allocated to another finance documents (payments or donations)."
          }
        }
      } ]
    },
    "RefundIdsResponse" : {
      "type" : "object",
      "properties" : {
        "RefundIdentifiers" : {
          "type" : "array",
          "description" : "List of refund identifiers that match request criteria. The field appears if idsOnly parameter was passed in request.",
          "items" : {
            "type" : "integer"
          }
        }
      }
    },
    "RefundListResponse" : {
      "type" : "object",
      "properties" : {
        "Refunds" : {
          "type" : "array",
          "description" : "List of refunds that match request criteria.",
          "items" : {
            "$ref" : "#/definitions/Refund"
          }
        }
      }
    },
    "RefundParam" : {
      "type" : "object",
      "properties" : {
        "RefundId" : {
          "type" : "integer",
          "description" : "Unique refund identifier."
        }
      }
    },
    "RefundsResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/RefundIdsResponse"
      }, {
        "$ref" : "#/definitions/RefundListResponse"
      } ]
    },
    "SalesTax" : {
      "type" : "object",
      "properties" : {
        "Name" : {
          "type" : "string",
          "description" : "Internal account tax name."
        },
        "PublicId" : {
          "type" : "string",
          "description" : "Public tax ID (displayed on invoices)."
        },
        "Rate" : {
          "type" : "number",
          "description" : "Tax rate value."
        }
      },
      "description" : "Taxes applied to the invoice according to account Tax Rules settings."
    },
    "SalesTaxInfo" : {
      "type" : "object",
      "properties" : {
        "Amount" : {
          "type" : "number",
          "description" : "total gross amount including all taxes"
        },
        "CalculatedTax1" : {
          "type" : "number",
          "description" : "tax 1 amount"
        },
        "CalculatedTax2" : {
          "type" : "number",
          "description" : "tax 2 amount"
        },
        "NetAmount" : {
          "type" : "number",
          "description" : "net amount from invoice items"
        },
        "RoundedAmount" : {
          "type" : "number",
          "description" : "rounded total amount including all taxes"
        },
        "Tax1" : {
          "type" : "object",
          "allOf" : [ {
            "$ref" : "#/definitions/SalesTax"
          }, {
            "description" : "applied Tax 1 description"
          } ]
        },
        "Tax2" : {
          "type" : "object",
          "allOf" : [ {
            "$ref" : "#/definitions/SalesTax"
          }, {
            "description" : "applied Tax 2 description"
          } ]
        }
      },
      "description" : "Describe taxes applied to this invoice item"
    },
    "Tender" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LinkedResourceWithName"
      }, {
        "type" : "object",
        "properties" : {
          "DisplayPosition" : {
            "type" : "integer",
            "description" : "Display position in UI."
          },
          "IsCustom" : {
            "type" : "boolean",
            "description" : "Indicates that this tender is created by account admin, otherwise the tender is built-in."
          }
        }
      } ]
    },
    "TendersResponse" : {
      "type" : "array",
      "description" : "Collection of tenders.",
      "items" : {
        "$ref" : "#/definitions/Tender"
      }
    },
    "UpdateInvoiceParams" : {
      "allOf" : [ {
        "$ref" : "#/definitions/EditInvoiceParams"
      }, {
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Identifier of the invoice to update"
          }
        }
      } ]
    },
    "UpdatePaymentParams" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FinanceDocument"
      }, {
        "type" : "object",
        "properties" : {
          "Tender" : {
            "$ref" : "#/definitions/LinkedResourceWithName"
          },
          "Comment" : {
            "type" : "string",
            "description" : "Internal note on payment. Visible to administrators only."
          },
          "PublicComment" : {
            "type" : "string",
            "description" : "Comment on payment. Visible to both administrators and payors."
          },
          "AllocatedValue" : {
            "type" : "number",
            "format" : "float",
            "description" : "Total amount allocated to another finance documents (invoices or refunds)."
          },
          "Type" : {
            "$ref" : "#/definitions/PaymentType"
          }
        }
      } ]
    },
    "UpdateRefundParams" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FinanceDocument"
      }, {
        "type" : "object",
        "properties" : {
          "Tender" : {
            "$ref" : "#/definitions/LinkedResourceWithName"
          },
          "Comment" : {
            "type" : "string",
            "description" : "Internal note on refund. Visible to administrators only."
          },
          "PublicComment" : {
            "type" : "string",
            "description" : "Comment on refund. Visible to both administrators and person being refunded."
          },
          "SettledValue" : {
            "type" : "number",
            "format" : "float",
            "description" : "The previously settled amount of the payment."
          }
        }
      } ]
    },
    "inline_response_200" : {
      "properties" : {
        "picture0" : {
          "type" : "string",
          "example" : "cldyhbc3.jpeg",
          "description" : "Picture guid"
        },
        "picture1" : {
          "type" : "string",
          "example" : "kxdtilz4.jpeg",
          "description" : "Picture guid"
        }
      }
    },
    "ContactsAsyncResponse_InitialQuery" : {
      "properties" : {
        "ObjectType" : {
          "type" : "string",
          "description" : "Object type which was requested. In this case it is always Contact."
        },
        "FilterExpression" : {
          "type" : "string",
          "description" : "Value of $filter parameter passed into API."
        },
        "SelectExpression" : {
          "type" : "string",
          "description" : "Value of $select parameter passed into API."
        },
        "ReturnIds" : {
          "type" : "boolean",
          "description" : "Indicates if client requested only a list of identifiers, instead of full list of contacts."
        }
      }
    },
    "CreateContactParams_MembershipLevel" : {
      "properties" : {
        "Id" : {
          "type" : "integer",
          "description" : "ID of membership level to assign."
        }
      }
    },
    "EditContactFieldParams_ExistsInLevels" : {
      "properties" : {
        "Id" : {
          "type" : "integer",
          "description" : "Id of membership level"
        }
      }
    },
    "MembershipRenewalPeriod_Dates" : {
      "properties" : {
        "Month" : {
          "type" : "integer",
          "description" : "Month of a year, 1-12",
          "minimum" : 1,
          "maximum" : 12
        },
        "Day" : {
          "type" : "integer",
          "description" : "Day of a month",
          "minimum" : 1,
          "maximum" : 31
        }
      }
    },
    "MembershipRenewalPeriod_ApplicationReview" : {
      "properties" : {
        "PrepayRequired" : {
          "type" : "boolean",
          "description" : "If true, membership fee should be received in full before application is activated. Else, approved memberships activate immediately, regardless of payment status."
        },
        "AdminApprovalRequired" : {
          "type" : "boolean",
          "description" : "\nIndicates that account administrator should approve membership application.\nFalse means that all applications are considered approved when they are submitted."
        }
      },
      "description" : "Application approval policy"
    },
    "EventRegistrationPost_Event" : {
      "required" : [ "Id" ],
      "properties" : {
        "Id" : {
          "type" : "integer"
        }
      }
    },
    "EventDetailsEditParams_Organizer" : {
      "properties" : {
        "Id" : {
          "type" : "integer"
        }
      },
      "description" : "Link to contact, who is set as organizer for this event."
    },
    "EditInvoiceParams_Contact" : {
      "properties" : {
        "Id" : {
          "type" : "integer",
          "description" : "ID of contact to whom the invoice is assigned."
        }
      }
    },
    "EditInvoiceParams_CreatedBy" : {
      "properties" : {
        "Id" : {
          "type" : "integer",
          "description" : "ID of contact who created the document. Could be null."
        }
      }
    },
    "EditInvoiceParams_UpdatedBy" : {
      "properties" : {
        "Id" : {
          "type" : "integer",
          "description" : "ID of contact who modified the document. Could be null."
        }
      }
    }
  },
  "parameters" : {
    "accountId" : {
      "name" : "accountId",
      "in" : "path",
      "description" : "Your account identifier",
      "required" : true,
      "type" : "number",
      "format" : "integer"
    },
    "AllocateInvoiceParams" : {
      "in" : "body",
      "name" : "AllocateInvoiceParams",
      "required" : true,
      "schema" : {
        "$ref" : "#/definitions/AllocateInvoiceParams"
      }
    },
    "CloneEvent" : {
      "in" : "body",
      "name" : "CloneEvent",
      "required" : true,
      "schema" : {
        "$ref" : "#/definitions/CloneEvent"
      }
    },
    "DocumentParam" : {
      "in" : "body",
      "name" : "DocumentParam",
      "required" : true,
      "schema" : {
        "$ref" : "#/definitions/DocumentParam"
      }
    },
    "emailDraftId" : {
      "in" : "body",
      "name" : "emailDraftId",
      "required" : true,
      "schema" : {
        "$ref" : "#/definitions/emailDraftId"
      }
    },
    "EmailRecipientsParams" : {
      "in" : "body",
      "name" : "EmailRecipientsParams",
      "required" : true,
      "schema" : {
        "$ref" : "#/definitions/EmailRecipientsParams"
      }
    },
    "pagingSkip" : {
      "name" : "$skip",
      "in" : "query",
      "description" : "\n'Specifies the number of records to skip (not include in a result set). For example if you expect about 300 records in result set and want to get them in small portions, you could make do so with 3 calls:'\n- ...&$top=100 - will return records from 0 to 99 - ...?$skip=100&top=100' - will return records from 100 to 199 - ...?$skip=200' - will return records from 199 to the end\n",
      "required" : false,
      "type" : "integer"
    },
    "pagingTop" : {
      "name" : "$top",
      "in" : "query",
      "description" : "this parameter specifies the maximum number of entries to be returned",
      "required" : false,
      "type" : "integer"
    },
    "RefundParam" : {
      "in" : "body",
      "name" : "RefundParam",
      "required" : true,
      "schema" : {
        "$ref" : "#/definitions/RefundParam"
      }
    },
    "EmailScheduleParams" : {
      "in" : "body",
      "name" : "EmailScheduleParams",
      "required" : true,
      "schema" : {
        "$ref" : "#/definitions/EmailScheduleParams"
      }
    },
    "SendDraftParams" : {
      "in" : "body",
      "name" : "SendDraft",
      "required" : true,
      "schema" : {
        "$ref" : "#/definitions/SendDraftParams"
      }
    },
    "SendEmailParams" : {
      "in" : "body",
      "name" : "sendEmailParams",
      "required" : true,
      "schema" : {
        "$ref" : "#/definitions/SendEmailParams"
      }
    }
  },
  "responses" : {
    "badRequest" : {
      "description" : "On invalid parameters. See error details in response body.",
      "schema" : {
        "$ref" : "#/definitions/Error"
      }
    },
    "notFound" : {
      "description" : "Requested item not found."
    },
    "termsOfUseRequired" : {
      "description" : "Current user should accept terms of use before using API. It can be done in web interface, or by making a POST request to /rpc/{accountId}/acceptTermsOfUse"
    },
    "tooManyRequests" : {
      "description" : "Too many requests from same account. Wait for a minute and try again."
    },
    "unauthorized" : {
      "description" : "oAuth token was not provided, invalid or does not provide access to requested URL."
    }
  }
}